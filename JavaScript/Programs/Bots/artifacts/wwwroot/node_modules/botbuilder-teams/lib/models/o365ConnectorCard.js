"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var builder = require("botbuilder");
var sprintf = require("sprintf-js");
var O365ConnectorCard = (function () {
    function O365ConnectorCard(session) {
        this.session = session;
        this.data = {
            contentType: 'application/vnd.microsoft.teams.card.o365connector',
            content: {}
        };
    }
    O365ConnectorCard.prototype.title = function (text) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (text) {
            this.data.content.title = fmtText(this.session, text, args);
        }
        else {
            delete this.data.content.title;
        }
        return this;
    };
    O365ConnectorCard.prototype.text = function (text) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (text) {
            this.data.content.text = fmtText(this.session, text, args);
        }
        else {
            delete this.data.content.text;
        }
        return this;
    };
    O365ConnectorCard.prototype.summary = function (text) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        this.data.content.summary = text ? fmtText(this.session, text, args) : '';
        return this;
    };
    O365ConnectorCard.prototype.themeColor = function (color) {
        if (color) {
            this.data.content.themeColor = color;
        }
        else {
            delete this.data.content.themeColor;
        }
        return this;
    };
    O365ConnectorCard.prototype.sections = function (list) {
        this.data.content.sections = [];
        if (list) {
            for (var i = 0; i < list.length; i++) {
                var section = list[i];
                this.data.content.sections.push(section.toSection ? section.toSection() : section);
            }
        }
        return this;
    };
    O365ConnectorCard.prototype.potentialAction = function (list) {
        this.data.content.potentialAction = [];
        if (list) {
            for (var i = 0; i < list.length; i++) {
                var action = list[i];
                var obj = action.toAction ?
                    action.toAction() : action;
                this.data.content.potentialAction.push(o365ActionToPayload(obj));
            }
        }
        return this;
    };
    O365ConnectorCard.prototype.toAttachment = function () {
        return this.data;
    };
    return O365ConnectorCard;
}());
exports.O365ConnectorCard = O365ConnectorCard;
var O365ConnectorCardActivityImageTypes;
(function (O365ConnectorCardActivityImageTypes) {
    O365ConnectorCardActivityImageTypes[O365ConnectorCardActivityImageTypes["Avatar"] = 0] = "Avatar";
    O365ConnectorCardActivityImageTypes[O365ConnectorCardActivityImageTypes["Article"] = 1] = "Article";
})(O365ConnectorCardActivityImageTypes = exports.O365ConnectorCardActivityImageTypes || (exports.O365ConnectorCardActivityImageTypes = {}));
var O365ConnectorCardSection = (function () {
    function O365ConnectorCardSection(session) {
        this.session = session;
        this.data = {};
    }
    O365ConnectorCardSection.prototype.title = function (text) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (text) {
            this.data.title = fmtText(this.session, text, args);
        }
        else {
            delete this.data.title;
        }
        return this;
    };
    O365ConnectorCardSection.prototype.text = function (text) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (text) {
            this.data.text = fmtText(this.session, text, args);
        }
        else {
            delete this.data.text;
        }
        return this;
    };
    O365ConnectorCardSection.prototype.activityTitle = function (text) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (text) {
            this.data.activityTitle = fmtText(this.session, text, args);
        }
        else {
            delete this.data.activityTitle;
        }
        return this;
    };
    O365ConnectorCardSection.prototype.activitySubtitle = function (text) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (text) {
            this.data.activitySubtitle = fmtText(this.session, text, args);
        }
        else {
            delete this.data.activitySubtitle;
        }
        return this;
    };
    O365ConnectorCardSection.prototype.activityText = function (text) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (text) {
            this.data.activityText = fmtText(this.session, text, args);
        }
        else {
            delete this.data.activityText;
        }
        return this;
    };
    O365ConnectorCardSection.prototype.activityImage = function (imageUrl) {
        if (imageUrl) {
            this.data.activityImage = imageUrl;
            if (!this.data.activityImageType) {
                this.data.activityImageType = 'avatar';
            }
        }
        else {
            delete this.data.activityImage;
            delete this.data.activityImageType;
        }
        return this;
    };
    O365ConnectorCardSection.prototype.activityImageType = function (imageType) {
        if (imageType === O365ConnectorCardActivityImageTypes.Article) {
            this.data.activityImageType = 'article';
        }
        else {
            this.data.activityImageType = 'avatar';
        }
        return this;
    };
    O365ConnectorCardSection.prototype.markdown = function (flag) {
        this.data.markdown = !!flag;
        return this;
    };
    O365ConnectorCardSection.prototype.facts = function (list) {
        this.data.facts = [];
        if (list) {
            for (var i = 0; i < list.length; i++) {
                var fact = list[i];
                this.data.facts.push(fact.toFact ? fact.toFact() : fact);
            }
        }
        return this;
    };
    O365ConnectorCardSection.prototype.images = function (list) {
        this.data.images = [];
        if (list) {
            for (var i = 0; i < list.length; i++) {
                var image = list[i];
                this.data.images.push(image.toImage ? image.toImage() : image);
            }
        }
        return this;
    };
    O365ConnectorCardSection.prototype.potentialAction = function (list) {
        this.data.potentialAction = [];
        if (list) {
            for (var i = 0; i < list.length; i++) {
                var action = list[i];
                var obj = action.toAction ?
                    action.toAction() : action;
                this.data.potentialAction.push(o365ActionToPayload(obj));
            }
        }
        return this;
    };
    O365ConnectorCardSection.prototype.toSection = function () {
        return this.data;
    };
    return O365ConnectorCardSection;
}());
exports.O365ConnectorCardSection = O365ConnectorCardSection;
var O365ConnectorCardFact = (function () {
    function O365ConnectorCardFact(session) {
        this.session = session;
        this.data = { name: '' };
    }
    O365ConnectorCardFact.prototype.name = function (text) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (text) {
            this.data.name = fmtText(this.session, text, args);
        }
        else {
            delete this.data.name;
        }
        return this;
    };
    O365ConnectorCardFact.prototype.value = function (text) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (text) {
            this.data.value = fmtText(this.session, text, args);
        }
        else {
            delete this.data.value;
        }
        return this;
    };
    O365ConnectorCardFact.prototype.toFact = function () {
        return this.data;
    };
    return O365ConnectorCardFact;
}());
exports.O365ConnectorCardFact = O365ConnectorCardFact;
var O365ConnectorCardImage = (function () {
    function O365ConnectorCardImage(session) {
        this.session = session;
        this.data = {};
    }
    O365ConnectorCardImage.prototype.image = function (url) {
        if (url) {
            this.data.image = url;
        }
        return this;
    };
    O365ConnectorCardImage.prototype.title = function (text) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (text) {
            this.data.title = fmtText(this.session, text, args);
        }
        else {
            delete this.data.title;
        }
        return this;
    };
    O365ConnectorCardImage.prototype.toImage = function () {
        return this.data;
    };
    return O365ConnectorCardImage;
}());
exports.O365ConnectorCardImage = O365ConnectorCardImage;
var O365ConnectorCardActionBase = (function () {
    function O365ConnectorCardActionBase(session) {
        this.session = session;
        this.data = {};
    }
    O365ConnectorCardActionBase.prototype.name = function (text) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (text) {
            this.data.name = fmtText(this.session, text, args);
        }
        else {
            delete this.data.name;
        }
        return this;
    };
    O365ConnectorCardActionBase.prototype.id = function (actionId) {
        if (actionId) {
            this.data.id = actionId;
        }
        else {
            delete this.data.id;
        }
        return this;
    };
    O365ConnectorCardActionBase.prototype.toAction = function () {
        this.data.type = this.type;
        return this.data;
    };
    return O365ConnectorCardActionBase;
}());
exports.O365ConnectorCardActionBase = O365ConnectorCardActionBase;
var O365ConnectorCardViewAction = (function (_super) {
    __extends(O365ConnectorCardViewAction, _super);
    function O365ConnectorCardViewAction(session) {
        var _this = _super.call(this, session) || this;
        _this.session = session;
        return _this;
    }
    O365ConnectorCardViewAction.prototype.target = function (targetUrl) {
        this.data.target = targetUrl ? [targetUrl] : [];
        return this;
    };
    Object.defineProperty(O365ConnectorCardViewAction.prototype, "type", {
        get: function () {
            return 'ViewAction';
        },
        enumerable: true,
        configurable: true
    });
    return O365ConnectorCardViewAction;
}(O365ConnectorCardActionBase));
exports.O365ConnectorCardViewAction = O365ConnectorCardViewAction;
var O365ConnectorCardOpenUri = (function (_super) {
    __extends(O365ConnectorCardOpenUri, _super);
    function O365ConnectorCardOpenUri(session) {
        var _this = _super.call(this, session) || this;
        _this.session = session;
        _this.targetsData = {};
        return _this;
    }
    O365ConnectorCardOpenUri.prototype.targets = function (platformUrlMap) {
        if (platformUrlMap) {
            this.targetsData = platformUrlMap;
            this.update();
        }
        return this;
    };
    O365ConnectorCardOpenUri.prototype.default = function (targetUrl) {
        if (targetUrl) {
            this.targetsData.default = targetUrl;
        }
        else {
            delete this.targetsData.default;
        }
        this.update();
        return this;
    };
    O365ConnectorCardOpenUri.prototype.iOS = function (targetUrl) {
        if (targetUrl) {
            this.targetsData.iOS = targetUrl;
        }
        else {
            delete this.targetsData.iOS;
        }
        this.update();
        return this;
    };
    O365ConnectorCardOpenUri.prototype.android = function (targetUrl) {
        if (targetUrl) {
            this.targetsData.android = targetUrl;
        }
        else {
            delete this.targetsData.android;
        }
        this.update();
        return this;
    };
    O365ConnectorCardOpenUri.prototype.windowsPhone = function (targetUrl) {
        if (targetUrl) {
            this.targetsData.windows = targetUrl;
        }
        else {
            delete this.targetsData.windows;
        }
        this.update();
        return this;
    };
    O365ConnectorCardOpenUri.prototype.update = function () {
        var data = [];
        for (var key in this.targetsData) {
            var val = this.targetsData[key];
            if (val) {
                data.push({
                    os: key,
                    uri: val
                });
            }
        }
        this.data.targets = data;
    };
    Object.defineProperty(O365ConnectorCardOpenUri.prototype, "type", {
        get: function () {
            return 'OpenUri';
        },
        enumerable: true,
        configurable: true
    });
    return O365ConnectorCardOpenUri;
}(O365ConnectorCardActionBase));
exports.O365ConnectorCardOpenUri = O365ConnectorCardOpenUri;
var O365ConnectorCardHttpPOST = (function (_super) {
    __extends(O365ConnectorCardHttpPOST, _super);
    function O365ConnectorCardHttpPOST(session) {
        var _this = _super.call(this, session) || this;
        _this.session = session;
        return _this;
    }
    O365ConnectorCardHttpPOST.prototype.body = function (text) {
        if (text) {
            this.data.body = text;
        }
        else {
            delete this.data.body;
        }
        return this;
    };
    Object.defineProperty(O365ConnectorCardHttpPOST.prototype, "type", {
        get: function () {
            return 'HttpPOST';
        },
        enumerable: true,
        configurable: true
    });
    return O365ConnectorCardHttpPOST;
}(O365ConnectorCardActionBase));
exports.O365ConnectorCardHttpPOST = O365ConnectorCardHttpPOST;
var O365ConnectorCardActionCard = (function (_super) {
    __extends(O365ConnectorCardActionCard, _super);
    function O365ConnectorCardActionCard(session) {
        var _this = _super.call(this, session) || this;
        _this.session = session;
        return _this;
    }
    O365ConnectorCardActionCard.prototype.actions = function (list) {
        var data = this.data;
        data.actions = [];
        if (list) {
            for (var i = 0; i < list.length; i++) {
                var action = list[i];
                var obj = action.toAction ?
                    action.toAction() : action;
                data.actions.push(o365ActionToPayload(obj));
            }
        }
        return this;
    };
    O365ConnectorCardActionCard.prototype.inputs = function (list) {
        var data = this.data;
        data.inputs = [];
        if (list) {
            for (var i = 0; i < list.length; i++) {
                var input = list[i];
                var obj = input.toInput ?
                    input.toInput() : input;
                data.inputs.push(o365InputToPayload(obj));
            }
        }
        return this;
    };
    Object.defineProperty(O365ConnectorCardActionCard.prototype, "type", {
        get: function () {
            return 'ActionCard';
        },
        enumerable: true,
        configurable: true
    });
    return O365ConnectorCardActionCard;
}(O365ConnectorCardActionBase));
exports.O365ConnectorCardActionCard = O365ConnectorCardActionCard;
var O365ConnectorCardInputBase = (function () {
    function O365ConnectorCardInputBase(session) {
        this.session = session;
        this.data = {};
    }
    O365ConnectorCardInputBase.prototype.id = function (inputId) {
        if (inputId) {
            this.data.id = inputId;
        }
        else {
            delete this.data.id;
        }
        return this;
    };
    O365ConnectorCardInputBase.prototype.isRequired = function (flag) {
        this.data.isRequired = !!flag;
        return this;
    };
    O365ConnectorCardInputBase.prototype.title = function (text) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (text) {
            this.data.title = fmtText(this.session, text, args);
        }
        else {
            delete this.data.title;
        }
        return this;
    };
    O365ConnectorCardInputBase.prototype.value = function (text) {
        if (text) {
            this.data.value = text;
        }
        else {
            delete this.data.value;
        }
        return this;
    };
    O365ConnectorCardInputBase.prototype.toInput = function () {
        this.data.type = this.type;
        return this.data;
    };
    return O365ConnectorCardInputBase;
}());
exports.O365ConnectorCardInputBase = O365ConnectorCardInputBase;
var O365ConnectorCardTextInput = (function (_super) {
    __extends(O365ConnectorCardTextInput, _super);
    function O365ConnectorCardTextInput(session) {
        var _this = _super.call(this, session) || this;
        _this.session = session;
        return _this;
    }
    O365ConnectorCardTextInput.prototype.isMultiline = function (flag) {
        this.data.isMultiline = !!flag;
        return this;
    };
    O365ConnectorCardTextInput.prototype.maxLength = function (len) {
        if (len && len > 0) {
            this.data.maxLength = len;
        }
        else {
            delete this.data.maxLength;
        }
        return this;
    };
    Object.defineProperty(O365ConnectorCardTextInput.prototype, "type", {
        get: function () {
            return 'textInput';
        },
        enumerable: true,
        configurable: true
    });
    return O365ConnectorCardTextInput;
}(O365ConnectorCardInputBase));
exports.O365ConnectorCardTextInput = O365ConnectorCardTextInput;
var O365ConnectorCardDateInput = (function (_super) {
    __extends(O365ConnectorCardDateInput, _super);
    function O365ConnectorCardDateInput(session) {
        var _this = _super.call(this, session) || this;
        _this.session = session;
        return _this;
    }
    O365ConnectorCardDateInput.prototype.includeTime = function (flag) {
        this.data.includeTime = !!flag;
        return this;
    };
    Object.defineProperty(O365ConnectorCardDateInput.prototype, "type", {
        get: function () {
            return 'dateInput';
        },
        enumerable: true,
        configurable: true
    });
    return O365ConnectorCardDateInput;
}(O365ConnectorCardInputBase));
exports.O365ConnectorCardDateInput = O365ConnectorCardDateInput;
var O365ConnectorCardMultichoiceInput = (function (_super) {
    __extends(O365ConnectorCardMultichoiceInput, _super);
    function O365ConnectorCardMultichoiceInput(session) {
        var _this = _super.call(this, session) || this;
        _this.session = session;
        return _this;
    }
    O365ConnectorCardMultichoiceInput.prototype.isMultiSelect = function (flag) {
        this.data.isMultiSelect = !!flag;
        return this;
    };
    O365ConnectorCardMultichoiceInput.prototype.style = function (s) {
        if (s) {
            this.data.style = s;
        }
        else {
            delete this.data.style;
        }
        return this;
    };
    O365ConnectorCardMultichoiceInput.prototype.compactStyle = function () {
        this.data.style = 'compact';
        return this;
    };
    O365ConnectorCardMultichoiceInput.prototype.expandedStyle = function () {
        this.data.style = 'expanded';
        return this;
    };
    O365ConnectorCardMultichoiceInput.prototype.choices = function (list) {
        var choicesData = [];
        if (list) {
            for (var i = 0; i < list.length; i++) {
                var item = list[i];
                if (item.toChoice) {
                    choicesData.push(item.toChoice());
                }
                else {
                    choicesData.push(item);
                }
            }
        }
        this.data.choices = choicesData;
        return this;
    };
    Object.defineProperty(O365ConnectorCardMultichoiceInput.prototype, "type", {
        get: function () {
            return 'multichoiceInput';
        },
        enumerable: true,
        configurable: true
    });
    return O365ConnectorCardMultichoiceInput;
}(O365ConnectorCardInputBase));
exports.O365ConnectorCardMultichoiceInput = O365ConnectorCardMultichoiceInput;
var O365ConnectorCardMultichoiceInputChoice = (function () {
    function O365ConnectorCardMultichoiceInputChoice(session) {
        this.session = session;
        this.data = {};
    }
    O365ConnectorCardMultichoiceInputChoice.prototype.display = function (text) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (text) {
            this.data.display = fmtText(this.session, text, args);
        }
        else {
            delete this.data.display;
        }
        return this;
    };
    O365ConnectorCardMultichoiceInputChoice.prototype.value = function (text) {
        if (text) {
            this.data.value = text;
        }
        else {
            delete this.data.value;
        }
        return this;
    };
    O365ConnectorCardMultichoiceInputChoice.prototype.toChoice = function () {
        return this.data;
    };
    return O365ConnectorCardMultichoiceInputChoice;
}());
exports.O365ConnectorCardMultichoiceInputChoice = O365ConnectorCardMultichoiceInputChoice;
function fmtText(session, prompts, args) {
    var fmt = builder.Message.randomPrompt(prompts);
    if (session) {
        fmt = session.gettext(fmt);
    }
    return args && args.length > 0 ? sprintf.vsprintf(fmt, args) : fmt;
}
exports.fmtText = fmtText;
function o365ActionToPayload(obj) {
    if (obj.type) {
        obj['@type'] = obj.type;
        delete obj.type;
    }
    if (obj.id) {
        obj['@id'] = obj.id;
        delete obj.id;
    }
    return obj;
}
exports.o365ActionToPayload = o365ActionToPayload;
function o365InputToPayload(obj) {
    if (obj.type) {
        obj['@type'] = obj.type;
        delete obj.type;
    }
    return obj;
}
exports.o365InputToPayload = o365InputToPayload;
