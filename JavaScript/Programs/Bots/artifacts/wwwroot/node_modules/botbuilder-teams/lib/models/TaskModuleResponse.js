"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AdaptiveCard_1 = require("./AdaptiveCard");
exports.taskModuleInvokeNameOfFetch = "task/fetch";
exports.taskModuleInvokeNameOfSubmit = "task/submit";
var TaskModuleResponseOfSubmit = (function () {
    function TaskModuleResponseOfSubmit() {
    }
    TaskModuleResponseOfSubmit.prototype.continue = function () {
        return new TaskModuleContinueResponse();
    };
    TaskModuleResponseOfSubmit.prototype.message = function () {
        return new TaskModuleMessageResponse();
    };
    TaskModuleResponseOfSubmit.prototype.cardResult = function () {
        return new TaskModuleCardResultResponse();
    };
    return TaskModuleResponseOfSubmit;
}());
exports.TaskModuleResponseOfSubmit = TaskModuleResponseOfSubmit;
var TaskModuleResponse = (function () {
    function TaskModuleResponse() {
    }
    TaskModuleResponse.createResponseOfFetch = function () {
        return new TaskModuleContinueResponse();
    };
    TaskModuleResponse.createResponseOfSubmit = function () {
        return new TaskModuleResponseOfSubmit();
    };
    TaskModuleResponse.prototype.toResponseOfSubmit = function () {
        var data = {
            task: this.getTaskObject()
        };
        return data;
    };
    return TaskModuleResponse;
}());
exports.TaskModuleResponse = TaskModuleResponse;
var TaskModuleContinueResponse = (function (_super) {
    __extends(TaskModuleContinueResponse, _super);
    function TaskModuleContinueResponse() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.data = {};
        return _this;
    }
    TaskModuleContinueResponse.prototype.url = function (url) {
        if (this.data.card) {
            throw new Error("'url' can not be assigned due to 'card' already assigned beforehand. It is not allowed to have both URL and card as contents.");
        }
        else {
            this.data.url = url;
        }
        return this;
    };
    TaskModuleContinueResponse.prototype.card = function (card) {
        if (this.data.url) {
            throw new Error("'card' can not be assigned due to 'url' already assigned beforehand. It is not allowed to have both URL and card as contents.");
        }
        else {
            this.data.card = TaskModuleHelper.cardToAttachment(card);
        }
        return this;
    };
    TaskModuleContinueResponse.prototype.height = function (val) {
        this.data.height = val;
        return this;
    };
    TaskModuleContinueResponse.prototype.width = function (val) {
        this.data.width = val;
        return this;
    };
    TaskModuleContinueResponse.prototype.fallbackUrl = function (url) {
        this.data.fallbackUrl = url;
        return this;
    };
    TaskModuleContinueResponse.prototype.title = function (title) {
        this.data.title = title;
        return this;
    };
    TaskModuleContinueResponse.prototype.toResponseOfFetch = function () {
        var data = {
            task: this.getTaskObject()
        };
        return data;
    };
    TaskModuleContinueResponse.prototype.getTaskObject = function () {
        return {
            type: 'continue',
            value: this.data
        };
    };
    return TaskModuleContinueResponse;
}(TaskModuleResponse));
exports.TaskModuleContinueResponse = TaskModuleContinueResponse;
var TaskModuleMessageResponse = (function (_super) {
    __extends(TaskModuleMessageResponse, _super);
    function TaskModuleMessageResponse() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.data = {
            type: 'message',
            value: ''
        };
        return _this;
    }
    TaskModuleMessageResponse.prototype.text = function (text) {
        this.data.value = text;
        return this;
    };
    TaskModuleMessageResponse.prototype.getTaskObject = function () {
        return this.data;
    };
    return TaskModuleMessageResponse;
}(TaskModuleResponse));
exports.TaskModuleMessageResponse = TaskModuleMessageResponse;
var TaskModuleCardResultResponse = (function (_super) {
    __extends(TaskModuleCardResultResponse, _super);
    function TaskModuleCardResultResponse() {
        var _this = _super.call(this) || this;
        _this.data = new AdaptiveCard_1.AdaptiveCard().toAttachment();
        return _this;
    }
    TaskModuleCardResultResponse.prototype.card = function (card) {
        this.data = TaskModuleHelper.cardToAttachment(card);
        return this;
    };
    TaskModuleCardResultResponse.prototype.getTaskObject = function () {
        return {
            type: 'cardResult',
            attachments: [this.data]
        };
    };
    return TaskModuleCardResultResponse;
}(TaskModuleResponse));
exports.TaskModuleCardResultResponse = TaskModuleCardResultResponse;
var TaskModuleHelper = (function () {
    function TaskModuleHelper() {
    }
    TaskModuleHelper.cardToAttachment = function (card) {
        var data;
        if (card instanceof AdaptiveCard_1.AdaptiveCard) {
            data = card.toAttachment();
        }
        else if (card.contentType) {
            var attachment = card;
            if (attachment.contentType.toLowerCase() === AdaptiveCard_1.AdaptiveCard.contentType.toLowerCase()) {
                data = attachment;
            }
            else {
                throw new Error('Invalid attachment content. Only adaptive card is acceptable.');
            }
        }
        else {
            data = {
                contentType: AdaptiveCard_1.AdaptiveCard.contentType,
                content: card
            };
        }
        return data;
    };
    return TaskModuleHelper;
}());
