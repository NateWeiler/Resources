"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ComposeExtensionResponse = (function () {
    function ComposeExtensionResponse(type) {
        this.data = {
            composeExtension: {
                type: ""
            }
        };
        this.data.composeExtension.type = type;
    }
    ComposeExtensionResponse.result = function (attachmentLayout) {
        if (attachmentLayout === void 0) { attachmentLayout = "list"; }
        var obj = new ComposeExtensionResponse("result");
        obj.data.composeExtension.attachmentLayout = attachmentLayout;
        return obj;
    };
    ComposeExtensionResponse.auth = function () {
        return new ComposeExtensionResponse("auth");
    };
    ComposeExtensionResponse.config = function () {
        return new ComposeExtensionResponse("config");
    };
    ComposeExtensionResponse.message = function () {
        return new ComposeExtensionResponse("message");
    };
    ComposeExtensionResponse.messagePreview = function () {
        return new ComposeExtensionResponse("botMessagePreview");
    };
    ComposeExtensionResponse.prototype.attachments = function (list) {
        this.data.composeExtension.attachments = [];
        if (list) {
            for (var i = 0; i < list.length; i++) {
                var attachment = list[i];
                this.data.composeExtension.attachments.push(attachment);
            }
        }
        return this;
    };
    ComposeExtensionResponse.prototype.actions = function (list) {
        this.data.composeExtension.suggestedActions = { actions: [] };
        if (list) {
            for (var i = 0; i < list.length; i++) {
                var action = list[i];
                this.data.composeExtension.suggestedActions.actions.push(action.toAction());
            }
        }
        return this;
    };
    ComposeExtensionResponse.prototype.text = function (text) {
        this.data.composeExtension.text = text;
        return this;
    };
    ComposeExtensionResponse.prototype.preview = function (msg) {
        this.data.composeExtension.activityPreview =
            msg.toMessage ? msg.toMessage() : msg;
        return this;
    };
    ComposeExtensionResponse.prototype.toResponse = function () {
        return this.data;
    };
    return ComposeExtensionResponse;
}());
exports.ComposeExtensionResponse = ComposeExtensionResponse;
