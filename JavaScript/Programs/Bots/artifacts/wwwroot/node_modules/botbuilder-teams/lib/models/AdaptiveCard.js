"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var builder = require("botbuilder");
var AdaptiveCardBotBuilderAction = (function () {
    function AdaptiveCardBotBuilderAction(sessionOrWrapAction) {
        this.sessionOrWrapAction = sessionOrWrapAction;
        if (sessionOrWrapAction instanceof builder.CardAction) {
            this.adaptorObj = sessionOrWrapAction;
        }
        else {
            this.adaptorObj = new builder.CardAction(sessionOrWrapAction);
        }
    }
    AdaptiveCardBotBuilderAction.convertFromBotBuilderCardAction = function (btn) {
        var adapterBtn = {
            id: undefined,
            type: 'Action.Submit',
            title: btn.title,
            data: {},
        };
        delete btn.title;
        adapterBtn.data[AdaptiveCardBotBuilderAction.TeamsActionWrapperName] = btn;
        return adapterBtn;
    };
    AdaptiveCardBotBuilderAction.prototype.type = function (t) {
        this.adaptorObj.type(t);
        return this;
    };
    AdaptiveCardBotBuilderAction.prototype.title = function (text) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var _a;
        (_a = this.adaptorObj).title.apply(_a, [text].concat(args));
        return this;
    };
    AdaptiveCardBotBuilderAction.prototype.value = function (v) {
        this.adaptorObj.value(v);
        return this;
    };
    AdaptiveCardBotBuilderAction.prototype.text = function (text) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var _a;
        (_a = this.adaptorObj).text.apply(_a, [text].concat(args));
        return this;
    };
    AdaptiveCardBotBuilderAction.prototype.displayText = function (text) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var _a;
        (_a = this.adaptorObj).displayText.apply(_a, [text].concat(args));
        return this;
    };
    AdaptiveCardBotBuilderAction.prototype.toAction = function () {
        return this.adaptorObj.toAction();
    };
    AdaptiveCardBotBuilderAction.prototype.toAdaptiveCardAction = function () {
        var btn = this.toAction();
        var adapterBtn = AdaptiveCardBotBuilderAction.convertFromBotBuilderCardAction(btn);
        return adapterBtn;
    };
    AdaptiveCardBotBuilderAction.TeamsActionWrapperName = 'msteams';
    return AdaptiveCardBotBuilderAction;
}());
exports.AdaptiveCardBotBuilderAction = AdaptiveCardBotBuilderAction;
var AdaptiveCard = (function () {
    function AdaptiveCard(session) {
        this.session = session;
        this.data = {
            type: 'AdaptiveCard',
            version: '1.0'
        };
    }
    Object.defineProperty(AdaptiveCard.prototype, "type", {
        get: function () {
            return this.data.type;
        },
        enumerable: true,
        configurable: true
    });
    AdaptiveCard.prototype.version = function (value) {
        this.data.version = value;
        return this;
    };
    AdaptiveCard.prototype.backgroundImage = function (value) {
        this.data.backgroundImage = value;
        return this;
    };
    AdaptiveCard.prototype.body = function (value) {
        this.data.body = value;
        return this;
    };
    AdaptiveCard.prototype.speak = function (value) {
        this.data.speak = value;
        return this;
    };
    AdaptiveCard.prototype.fallbackText = function (value) {
        this.data.fallbackText = value;
        return this;
    };
    AdaptiveCard.prototype.lang = function (value) {
        this.data.lang = value;
        return this;
    };
    AdaptiveCard.prototype.actions = function (list) {
        this.data.actions = [];
        if (list) {
            for (var i = 0; i < list.length; i++) {
                var action = list[i];
                var isBotBuilderAction = (list instanceof builder.CardAction) || action.toAction;
                if (isBotBuilderAction) {
                    var btn = action.toAction ? action.toAction() : action;
                    var adapterBtn = AdaptiveCardBotBuilderAction.convertFromBotBuilderCardAction(btn);
                    this.data.actions.push(adapterBtn);
                }
                else {
                    if (action.toAdaptiveCardAction) {
                        this.data.actions.push(action.toAdaptiveCardAction());
                    }
                    else {
                        this.data.actions.push(action);
                    }
                }
            }
        }
        return this;
    };
    AdaptiveCard.prototype.toAdaptiveCard = function () {
        return this.data;
    };
    AdaptiveCard.prototype.toAttachment = function () {
        var cardAttachment = {
            contentType: AdaptiveCard.contentType,
            content: this.toAdaptiveCard()
        };
        return cardAttachment;
    };
    AdaptiveCard.contentType = 'application/vnd.microsoft.card.adaptive';
    return AdaptiveCard;
}());
exports.AdaptiveCard = AdaptiveCard;
