import * as Enums from "./enums";
/**
 * Fast UUID generator, RFC4122 version 4 compliant.
 * @author Jeff Ward (jcward.com).
 * @license MIT license
 * @link http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136
 **/
export declare class UUID {
    private static lut;
    static generate(): string;
    static initialize(): void;
}
export declare const ContentTypes: {
    applicationJson: string;
    applicationXWwwFormUrlencoded: string;
};
export interface ISeparationDefinition {
    spacing: number;
    lineThickness?: number;
    lineColor?: string;
}
export interface IInput {
    id: string;
    value: string;
}
export declare function getValueOrDefault<T>(obj: any, defaultValue: T): T;
export declare function isNullOrEmpty(value: string): boolean;
export declare function appendChild(node: Node, child: Node): void;
export declare function setProperty(target: any, propertyName: string, propertyValue: any, defaultValue?: any): void;
export declare function setEnumProperty(enumType: {
    [s: number]: string;
}, target: any, propertyName: string, propertyValue: number, defaultValue?: number): void;
export declare function getEnumValueOrDefault(targetEnum: {
    [s: number]: string;
}, name: string, defaultValue: number): number;
export declare function parseHostConfigEnum(targetEnum: {
    [s: number]: string;
}, value: string | number, defaultValue: any): any;
export declare function renderSeparation(separationDefinition: ISeparationDefinition, orientation: Enums.Orientation): HTMLElement;
export declare function stringToCssColor(color: string): string;
export declare class StringWithSubstitutions {
    private _isProcessed;
    private _original;
    private _processed;
    substituteInputValues(inputs: Array<IInput>, contentType: string): void;
    getOriginal(): string;
    get(): string;
    set(value: string): void;
}
export declare class SizeAndUnit {
    physicalSize: number;
    unit: Enums.SizeUnit;
    static parse(input: any): SizeAndUnit;
    constructor(physicalSize: number, unit: Enums.SizeUnit);
}
export declare function truncate(element: HTMLElement, maxHeight: number, lineHeight?: number): void;
export declare function getFitStatus(element: HTMLElement, containerEnd: number): Enums.ContainerFitStatus;
