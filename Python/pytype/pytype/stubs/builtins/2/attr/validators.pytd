import __future__
import attr._make
from typing import Any, List

_AndValidator: Any
_InValidator: Any
_InstanceOfValidator: Any
_OptionalValidator: Any
_ProvidesValidator: Any
_DeepMapping: Any
_DeepIterable: Any
_IsCallableValidator: Any
_MatchesReValidator: Any

__all__: List[str]
absolute_import: __future__._Feature
division: __future__._Feature
print_function: __future__._Feature

attrib = attr._make.attrib
attrs = attr._make.attrs
def and_(*validators) -> Any: ...
def deep_iterable(member_validator, iterable_validator = ...) -> Any: ...
def deep_mapping(key_validator, value_validator, mapping_validator = ...) -> Any: ...
def in_(options) -> Any: ...
def instance_of(type) -> Any: ...
def instance_of(type) -> Any: ...
def is_callable() -> Any: ...
def matches_re(regex, flags: int = ..., func = ...) -> Any: ...
def optional(validator) -> Any: ...
def provides(interface) -> Any: ...
