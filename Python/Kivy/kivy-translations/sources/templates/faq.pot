# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: 1.0.9-dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-10-24 12:00\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../sources/faq.rst:4
# 7a49df0a92eb400d8ede42bf8f707da9
msgid "FAQ"
msgstr ""

#: ../../sources/faq.rst:6
# 290a4dfcfebb4d799637d716eca035eb
msgid "There are a number of questions that repeatedly need to be answered. The following document tries to answer some of them."
msgstr ""

#: ../../sources/faq.rst:12
# 1bf20fbdca19464080d32d706eaebe2a
msgid "Technical FAQ"
msgstr ""

#: ../../sources/faq.rst:15
# 149bb917fc9c4ec7ada2ec7f2a09832c
msgid "Fatal Python error: (pygame parachute) Segmentation Fault"
msgstr ""

#: ../../sources/faq.rst:17
# b5e72884f05b4e6783ff36ff23e467f2
msgid "Most of time, this issue is due to an usage of old graphics driver. Install the latest graphics driver available for your graphics card, and it could be ok."
msgstr ""

#: ../../sources/faq.rst:20
# 4f14e9d7181544ccb490391d4c682de1
msgid "If not, please report a detailled issue to github, by following the :ref:`contribute` document, in the section `Reporting an Issue`. This is very important for us because that kind of error can be very hard to debug. Give us all the informations you can give about your environment and execution."
msgstr ""

#: ../../sources/faq.rst:27
# 2f629e745e6b4b08a73a8c7fe43eecde
msgid "undefined symbol: glGenerateMipmap"
msgstr ""

#: ../../sources/faq.rst:29
# 3117c085093743b4831fa559c1e97b24
msgid "You might have a too old graphics card. Update your graphics drivers to the latest available version, and retry."
msgstr ""

#: ../../sources/faq.rst:33
# 96215434ceb1499e89eb031f3fd3f734
msgid "ImportError: No module named event"
msgstr ""

#: ../../sources/faq.rst:35
# 717d0f42257a4afd89d80802aff7549b
msgid "If you use Kivy from our development version, you must compile it before using it. In the kivy directory, do::"
msgstr ""

#: ../../sources/faq.rst:41
# 0fa08f451d8e4df89b7de8ba0d4d8916
msgid "Pip installation failed"
msgstr ""

#: ../../sources/faq.rst:43
# 61d036ecd14c4ddfb1e7b300d2ca03cf
msgid "Installing Kivy using Pip is not currently supported. Because Pip force the usage of setuptools, setuptools hack build_ext to use pyrex for generating .c, and they are no clean solution to hack against both weird behaviors to use Cython. (Reference: http://mail.scipy.org/pipermail/nipy-devel/2011-March/005709.html)"
msgstr ""

#: ../../sources/faq.rst:48
# f9c768b9d0b14c20882c43e1c96d9fa1
msgid "Solution: use `easy_install`, as our documentation said."
msgstr ""

#: ../../sources/faq.rst:52
# 03ba814f34b1409283d9e66f3f4ec4a4
msgid "Android FAQ"
msgstr ""

#: ../../sources/faq.rst:55
# 3018c50a98a045d59b2234a290fd6cfa
msgid "could not extract public data"
msgstr ""

#: ../../sources/faq.rst:57
# 399ec1f2f1744730a0f6d5db18c91e50
msgid "This message error can happen in many cases. Ensure that:"
msgstr ""

#: ../../sources/faq.rst:59
# ebc3b9064081487a8b5364a2a9aff9c0
msgid "you have a phone with sdcard"
msgstr ""

#: ../../sources/faq.rst:60
# 5cef35f4358946a99ba4103be3e1520c
msgid "you are not currently in a \"USB Mass Storage\" mode"
msgstr ""

#: ../../sources/faq.rst:61
# 767d4dd6c5d64a8795076a373e8d287e
msgid "you have the permissions to write on sdcard"
msgstr ""

#: ../../sources/faq.rst:63
# c60d19592a004b77aa3a66c8e8622b89
msgid "In case of USB Mass Storage mode error, and if you don't want to keep unplugging the device, set the usb option to Power."
msgstr ""

#: ../../sources/faq.rst:67
# 8d2056a444af4f8f8255bd91cd45092d
msgid "Is it possible to have a kiosk app on android 3.0 ?"
msgstr ""

#: ../../sources/faq.rst:69
# fbfcebd14bc248158715d18b9d2adc51
msgid "Thomas Hansen have wrote a detailed answer on kivy-users mailing list:"
msgstr ""

#: ../../sources/faq.rst:71
# 9547f1fdb1144ef69cc5376a45a410f3
msgid "https://groups.google.com/d/msg/kivy-users/QKoCekAR1c0/yV-85Y_iAwoJ"
msgstr ""

#: ../../sources/faq.rst:73
# 14696663df2249e08967aa8d5ca0930e
msgid "Basicaly, you need to root de device, remove the SystemUI package, add some line on the xml configuration, and you're done."
msgstr ""

#: ../../sources/faq.rst:78
# 8ddcab6c481749d7b578fedc81e20b8a
msgid "Project FAQ"
msgstr ""

#: ../../sources/faq.rst:81
# 1dc1380ebed240e793ad47fc35dcb673
msgid "Why do you use Python? Isn't it slow?"
msgstr ""

#: ../../sources/faq.rst:83
# a5c201d7a54f4b00b717810602b84f01
msgid "Let us try to give a thorough answer; please bear with us."
msgstr ""

#: ../../sources/faq.rst:85
# 86b87468518e491ebdff93f8c72ecad0
msgid "Python is a very agile language that allows you to do many things in (by comparison) short time. For many development scenarios, we strongly prefer writing our application quickly in a high-level language such as Python, testing it, then optionally optimizing it."
msgstr ""

#: ../../sources/faq.rst:91
# de2cb98772df4f3381ce19c7fe85bc23
msgid "But what about speed? If you compare execution speeds of implementations for a certain set of algorithms (esp. number crunching) you will find that Python is a lot slower than say, C++. Now you may be even more convinced that it's not a good idea in our case to use Python. Drawing sophisticated graphics (and we are not talking about your grandmother's OpenGL here) is computationally quite expensive and given that we often want to do that for rich user experiences, that would be a fair argument. **But**, in virtually every case your application ends up spending most of the time (by far) executing the same part of the code. For Kivy for example, these parts are event dispatching and graphics drawing. Now Python allows you to do something to make these parts much faster."
msgstr ""

#: ../../sources/faq.rst:106
# a31dd8ea22154c1fa71f77ee8a2cb18a
msgid "By using Cython, you can compile your code down to the C level, and from there your usual C compiler optimizes things. This is a pretty pain free process and if you add some hints to your code, the result becomes even faster. We are talking about a speed up in performance by a factor of anything in between 1x and up to more than 1000x (greatly depends on your code). In Kivy, we did this for you and implemented the portions of our code where efficiency really is critical on the C level."
msgstr ""

#: ../../sources/faq.rst:115
# 07eed33830d249a3a721f8dd70da951a
msgid "For graphics drawing, we also leverage today's GPUs which are, for some tasks such as graphics rasterization, much more efficent than a CPU. Kivy does as much as is reasonable on the GPU to maximize performance. If you use our Canvas API to do the drawing, there is even a compiler that we invented which optimizes your drawing code automatically. If you keep your drawing on the GPU mostly, much of your program's execution speed is not determined by the programming language used, but by the graphics hardware you throw at it."
msgstr ""

#: ../../sources/faq.rst:125
# 5527004b7ca84ffcae1c21727233c904
msgid "We believe that these (and other) optimizations that Kivy does for you already make most applications fast enough by far. Often you will even want to limit the speed of the application in order not to waste resources. But even if this is not sufficient, you still have the option of using Cython for your own code to *greatly* speed it up."
msgstr ""

#: ../../sources/faq.rst:132
# 6d2415a8685e4cc4a2aaffd58d7157db
msgid "Trust us when we say that we have given this very careful thought. We have performed many different benchmarks and came up with quite some clever optimizations to make your application run smoothly."
msgstr ""

#: ../../sources/faq.rst:138
# e766ba8942294d95909963e9e57a1b0b
msgid "Does Kivy support Python 3.x?"
msgstr ""

#: ../../sources/faq.rst:140
# 1a4ed2f9524c49f694bef939680651bb
msgid "No. Not yet. Python 3 is certainly a good thing; However, it broke backwards compatibility (for good reasons) which means that some considerable portion of available Python projects do not yet work with Python 3. This also applies to some of the projects that Kivy can use as a dependency, which is why we didn't make the switch yet. We would also need to switch our own codebase to Python 3. We didn't do that yet because it's not very high on our priority list, but if somebody doesn't want to wait for us doing it, please go ahead. Please note, though, that Python 2.x is still the de facto standard."
msgstr ""

#: ../../sources/faq.rst:152
# 90324bbd0b7f460c8cde75a4c363b42c
msgid "How is Kivy related to PyMT?"
msgstr ""

#: ../../sources/faq.rst:154
# 1f06cc6c158147dd824255aa91d4f900
msgid "Our developers are professionals and are pretty savvy in their area of expertise. However, before Kivy came around there was (and still is) a project named PyMT that was led by our core developers. We learned a great deal from that project during the time that we developed it. In the more than two years of research and development we found many interesting ways on how to improve the design of our framework. We have done numerous benchmarks and as it turns out, to achieve the great speed and flexibility that Kivy has, we had to rewrite quite a big portion of the codebase, making this a backwards-incompatible but future-proof decision. Most notably are the performance increases, which are just incredible. Kivy starts and operates just so much faster, due to heavy optimizations. We also had the opportunity to work with businesses and associations using PyMT. We were able to test our product on a large diversity of setups and made PyMT work on all of these. Writing a system such as Kivy or PyMT is one thing. Making it work under all the different conditions is another. We have a good background here, and brought our knowledge to Kivy."
msgstr ""

#: ../../sources/faq.rst:174
# aaa8dd64c5154cc9be98c2b700c42ff2
msgid "Furthermore, since some of our core developers decided to stop their full-time jobs and to turn to this project completely, it was decided that a more professional foundation had to be laid. Kivy is that foundation. It is supposed to be a stable and professional product. Technically, Kivy is not really a successor to PyMT because there is no easy migration path between them. However, the goal is the same: Producing high-quality applications for novel user interfaces. This is why we encourage everyone to base new projects on Kivy instead of PyMT. Active development of PyMT has stalled. Maintenance patches are still accepted."
msgstr ""

#: ../../sources/faq.rst:188
# 260a74f11c2249869a6217445d0c6fd8
msgid "Do you accept patches?"
msgstr ""

#: ../../sources/faq.rst:190
# 689bfea9a19e4026b5f9515da58ed5e4
msgid "Yes, we love patches. In order to ensure a smooth integration of your precious changes, however, please make sure to read our contribution guidelines. Obviously we don't accept every patch. Your patch has to be coherent with our styleguide and, more importantly, make sense. It does make sense to talk to us before you come up with bigger changes, especially new features."
msgstr ""

#: ../../sources/faq.rst:199
# d484a62770e945489d802afecf3a12fb
msgid "Does the Kivy project participate in Google's Summer of Code 2011? ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~---------"
msgstr ""

#: ../../sources/faq.rst:202
# 15998e59f6624bfdbc482db5a40fc9e6
msgid "Since Google announced that there will be a GSoC 2011 we have had many potential students ask whether we would participate. The clear answer is: Indeed. :-) The NUIGroup has applied as an umbrella organization and luckily got chosen as one of the mentoring organizations. Given enough slots for NUIGroup, slots will be dedicated to Kivy. That also depends on the overall quality of the student proposals (i.e. if there is only one Kivy student proposal with a bad quality, Kivy will not get a slot). If you want to participate as a student and want to maximize your chances of being accepted, start talking to us today and try fixing some smaller (or larger, if you can ;-) problems to get used to our workflow. If we know you can work well with us, that'd be a big plus."
msgstr ""

#: ../../sources/faq.rst:215
# 3e5a7d320a1d4a6980d2d4f212cf5d40
msgid "See: http://wiki.nuigroup.com/Google_Summer_of_Code_2011"
msgstr ""

#: ../../sources/faq.rst:217
# 6005e68f383e4927ae897f59e488766a
msgid "Here's a checklist:"
msgstr ""

#: ../../sources/faq.rst:219
# 202e15280eb84c5c878720713f21a502
msgid "Make sure to read through the website and at least skim the documentation."
msgstr ""

#: ../../sources/faq.rst:221
# 6323df8fdefa4ab4a2749833d4ef45e0
msgid "Look at the source code."
msgstr ""

#: ../../sources/faq.rst:222
# ac5c3d76c8cc42d8ae1dfca02321725e
msgid "Read our contribution guidelines."
msgstr ""

#: ../../sources/faq.rst:223
# 682be4f598554d34aea86471791fae5d
msgid "Pick an idea that you think is interesting from the ideas list (see link above) or come up with your own idea."
msgstr ""

#: ../../sources/faq.rst:225
# 35f85ee917584c63bb4b2a91757d5199
msgid "Do some research **yourself**. GSoC is not about us teaching you something and you getting paid for that. It is about you trying to achieve agreed upon goals by yourself with our support. The main driving force in this should be, obviously, yourself, though. Many students come up and ask what they should do. Well, we don't know because we know neither your interests nor your skills. Show us you're serious about it and take initiative."
msgstr ""

#: ../../sources/faq.rst:232
# 4fa405eeb2a548e398093320d67d4198
msgid "Write a draft proposal about what you want to do. Include what you understand the current state is (very roughly), what you would like to improve and how, etc."
msgstr ""

#: ../../sources/faq.rst:235
# daeda97228da4badad8f6c6e4203d839
msgid "Discuss that proposal with us in a timely manner. Get feedback."
msgstr ""

#: ../../sources/faq.rst:236
# da6cc7f9f8a94e128b507b500ce760d2
msgid "Be patient! Especially on IRC. We will try to get to you if we're available. If not, send an email and just wait. Most questions are already answered in the docs or somewhere else and can be found with some research. If your questions don't reflect that you've actually thought through what you're asking, that might not be received well."
msgstr ""

#: ../../sources/faq.rst:242
# 3e88cf62cd574e26a679a16b5f5b8053
msgid "Good luck! :-)"
msgstr ""

