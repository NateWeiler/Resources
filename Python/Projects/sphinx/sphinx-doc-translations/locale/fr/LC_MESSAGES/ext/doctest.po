# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, Georg Brandl and the Sphinx team
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# LAURENT Raphaël <laurent@ined.fr>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 1.8.0+\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-06-25 15:55+0000\n"
"PO-Revision-Date: 2018-02-12 13:47+0000\n"
"Last-Translator: LAURENT Raphaël <laurent@ined.fr>, 2019\n"
"Language-Team: French (https://www.transifex.com/sphinx-doc/teams/15434/fr/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fr\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../sphinx/doc/ext/doctest.rst:4
msgid ":mod:`sphinx.ext.doctest` -- Test snippets in the documentation"
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:14
msgid ""
"This extension allows you to test snippets in the documentation in a natural"
" way.  It works by collecting specially-marked up code blocks and running "
"them as doctest tests."
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:18
msgid ""
"Within one document, test code is partitioned in *groups*, where each group "
"consists of:"
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:21
msgid "zero or more *setup code* blocks (e.g. importing the module to test)"
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:22
msgid "one or more *test* blocks"
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:24
msgid ""
"When building the docs with the ``doctest`` builder, groups are collected "
"for each document and run one after the other, first executing setup code "
"blocks, then the test blocks in the order they appear in the file."
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:28
msgid "There are two kinds of test blocks:"
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:30
msgid ""
"*doctest-style* blocks mimic interactive sessions by interleaving Python "
"code (including the interpreter prompt) and output."
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:33
msgid ""
"*code-output-style* blocks consist of an ordinary piece of Python code, and "
"optionally, a piece of output for that code."
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:38
msgid "Directives"
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:40
msgid ""
"The *group* argument below is interpreted as follows: if it is empty, the "
"block is assigned to the group named ``default``.  If it is ``*``, the block"
" is assigned to all groups (including the ``default`` group).  Otherwise, it"
" must be a comma-separated list of group names."
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:47
msgid ""
"A setup code block.  This code is not shown in the output for other "
"builders, but executed before the doctests of the group(s) it belongs to."
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:53
msgid ""
"A cleanup code block.  This code is not shown in the output for other "
"builders, but executed after the doctests of the group(s) it belongs to."
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:61
msgid ""
"A doctest-style code block.  You can use standard :mod:`doctest` flags for "
"controlling how actual output is compared with what you give as output.  The"
" default set of flags is specified by the :confval:`doctest_default_flags` "
"configuration variable."
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:66
msgid "This directive supports three options:"
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:68
msgid ""
"``hide``, a flag option, hides the doctest block in other builders.  By "
"default it is shown as a highlighted doctest block."
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:71
msgid ""
"``options``, a string option, can be used to give a comma-separated list of "
"doctest flags that apply to each example in the tests.  (You still can give "
"explicit flags per example, with doctest comments, but they will show up in "
"other builders too.)"
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:76
msgid ""
"``pyversion``, a string option, can be used to specify the required Python "
"version for the example to be tested. For instance, in the following case "
"the example will be tested only for Python versions greather than 3.3::"
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:83
msgid "The following operands are supported:"
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:85
msgid "``~=``: Compatible release clause"
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:86
msgid "``==``: Version matching clause"
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:87
msgid "``!=``: Version exclusion clause"
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:88
msgid "``<=``, ``>=``: Inclusive ordered comparison clause"
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:89
msgid "``<``, ``>``: Exclusive ordered comparison clause"
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:90
msgid "``===``: Arbitrary equality clause."
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:92
msgid ""
"``pyversion`` option is followed `PEP-440: Version Specifiers "
"<https://www.python.org/dev/peps/pep-0440/#version-specifiers>`__."
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:99
msgid "Supported PEP-440 operands and notations"
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:101
msgid ""
"Note that like with standard doctests, you have to use ``<BLANKLINE>`` to "
"signal a blank line in the expected output.  The ``<BLANKLINE>`` is removed "
"when building presentation output (HTML, LaTeX etc.)."
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:105
msgid "Also, you can give inline doctest options, like in doctest::"
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:110
msgid ""
"They will be respected when the test is run, but stripped from presentation "
"output."
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:116
msgid "A code block for a code-output-style test."
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:118
msgid "This directive supports one option:"
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:120
msgid ""
"``hide``, a flag option, hides the code block in other builders.  By default"
" it is shown as a highlighted code block."
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:125
msgid ""
"Code in a ``testcode`` block is always executed all at once, no matter how "
"many statements it contains.  Therefore, output will *not* be generated for "
"bare expressions -- use ``print``.  Example::"
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:138
msgid ""
"Also, please be aware that since the doctest module does not support mixing "
"regular output and an exception message in the same snippet, this applies to"
" testcode/testoutput as well."
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:145
msgid ""
"The corresponding output, or the exception message, for the last "
":rst:dir:`testcode` block."
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:148
msgid "This directive supports two options:"
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:150
msgid ""
"``hide``, a flag option, hides the output block in other builders.  By "
"default it is shown as a literal block without highlighting."
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:153
msgid ""
"``options``, a string option, can be used to give doctest flags (comma-"
"separated) just like in normal doctest blocks."
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:156
msgid "Example::"
msgstr "Exemple::"

#: ../../sphinx/doc/ext/doctest.rst:169
msgid ""
"The following is an example for the usage of the directives.  The test via "
":rst:dir:`doctest` and the test via :rst:dir:`testcode` and "
":rst:dir:`testoutput` are equivalent. ::"
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:203
msgid "Configuration"
msgstr "Configuration"

#: ../../sphinx/doc/ext/doctest.rst:205
msgid "The doctest extension uses the following configuration values:"
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:209
msgid "By default, these options are enabled:"
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:211
msgid ""
"``ELLIPSIS``, allowing you to put ellipses in the expected output that match"
" anything in the actual output;"
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:213
msgid ""
"``IGNORE_EXCEPTION_DETAIL``, causing everything following the leftmost colon"
" and any module information in the exception name to be ignored;"
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:215
msgid ""
"``DONT_ACCEPT_TRUE_FOR_1``, rejecting \"True\" in the output where \"1\" is "
"given -- the default behavior of accepting this substitution is a relic of "
"pre-Python 2.2 times."
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:223
msgid ""
"A list of directories that will be added to :data:`sys.path` when the "
"doctest builder is used.  (Make sure it contains absolute paths.)"
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:228
msgid ""
"Python code that is treated like it were put in a ``testsetup`` directive "
"for *every* file that is tested, and for every group.  You can use this to "
"e.g. import modules you will always need in your doctests."
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:236
msgid ""
"Python code that is treated like it were put in a ``testcleanup`` directive "
"for *every* file that is tested, and for every group.  You can use this to "
"e.g. remove any temporary files that the tests leave behind."
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:244
msgid ""
"If this is a nonempty string (the default is ``'default'``), standard reST "
"doctest blocks will be tested too.  They will be assigned to the group name "
"given."
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:248
msgid ""
"reST doctest blocks are simply doctests put into a paragraph of their own, "
"like so::"
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:258
msgid ""
"(Note that no special ``::`` is used to introduce a doctest block; docutils "
"recognizes them from the leading ``>>>``.  Also, no additional indentation "
"is used, though it doesn't hurt.)"
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:262
msgid ""
"If this value is left at its default value, the above snippet is interpreted"
" by the doctest builder exactly like the following::"
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:274
msgid ""
"This feature makes it easy for you to test doctests in docstrings included "
"with the :mod:`~sphinx.ext.autodoc` extension without marking them up with a"
" special directive."
msgstr ""

#: ../../sphinx/doc/ext/doctest.rst:278
msgid ""
"Note though that you can't have blank lines in reST doctest blocks.  They "
"will be interpreted as one block ending and another one starting.  Also, "
"removal of ``<BLANKLINE>`` and ``# doctest:`` options only works in "
":rst:dir:`doctest` blocks, though you may set :confval:`trim_doctest_flags` "
"to achieve that in all code blocks with Python console content."
msgstr ""
