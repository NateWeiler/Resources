# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, Georg Brandl and the Sphinx team
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Takayuki SHIMIZUKAWA <shimizukawa@gmail.com>, 2018
# SHIMIZU Taku <shimizu.taku@gmail.com>, 2018
# Naofumi SAKAGUCHI <nskgch@gmail.com>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 2.0.0+/25fed568\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-12-22 17:26+0000\n"
"PO-Revision-Date: 2018-02-12 13:48+0000\n"
"Last-Translator: Naofumi SAKAGUCHI <nskgch@gmail.com>, 2019\n"
"Language-Team: Japanese (https://www.transifex.com/sphinx-doc/teams/15434/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../sphinx/doc/extdev/tutorial.rst:4
msgid "Tutorial: Writing a simple extension"
msgstr "チュートリアル: シンプルな拡張を作成"

#: ../../sphinx/doc/extdev/tutorial.rst:6
msgid ""
"This section is intended as a walkthrough for the creation of custom "
"extensions. It covers the basics of writing and activating an extension, as "
"well as commonly used features of extensions."
msgstr ""
"このセクションではカスタムの拡張の作成について一通り説明していきたいと思います。 "
"ここの説明でカバーするのは、拡張の基本的な書き方と登録の仕方、あとは拡張を作成するのに使用される一般的な機能などです。"

#: ../../sphinx/doc/extdev/tutorial.rst:10
msgid ""
"As an example, we will cover a \"todo\" extension that adds capabilities to "
"include todo entries in the documentation, and to collect these in a central"
" place.  (A similar \"todo\" extension is distributed with Sphinx.)"
msgstr ""
"サンプルとしては、ドキュメントの中にToDoを書くことができるようになり、指定された場所にすべてのToDoの一覧を出力する、\"todo\"拡張を扱おうと思います。Sphinxの配布物に含まれる\"todo\"拡張とほぼ同じものになります。"

#: ../../sphinx/doc/extdev/tutorial.rst:16
msgid "Important objects"
msgstr "重要なオブジェクト"

#: ../../sphinx/doc/extdev/tutorial.rst:18
msgid ""
"There are several key objects whose API you will use while writing an "
"extension.  These are:"
msgstr "あなたが拡張を書くときに使用するAPIを持つ、いくつかの鍵となるオブジェクトがあります。それらは次のとおりです:"

#: ../../sphinx/doc/extdev/tutorial.rst:27
msgid "**Application**"
msgstr "**アプリケーション**"

#: ../../sphinx/doc/extdev/tutorial.rst:22
msgid ""
"The application object (usually called ``app``) is an instance of "
":class:`.Sphinx`.  It controls most high-level functionality, such as the "
"setup of extensions, event dispatching and producing output (logging)."
msgstr ""
"アプリケーションオブジェクト(通常 ``app`` と呼ばれる)は :class:`.Sphinx` "
"のインスタンスです。これは高位の機能をコントロールします。例えば、拡張のセットアップや、イベントのディスパッチ、アウトプットの生成(ロギング)等です。"

#: ../../sphinx/doc/extdev/tutorial.rst:26
msgid ""
"If you have the environment object, the application is available as "
"``env.app``."
msgstr "もし、環境オブジェクトがあれば、 ``env.app`` のようにアプリケーションが提供されます。"

#: ../../sphinx/doc/extdev/tutorial.rst:40
msgid "**Environment**"
msgstr "**Environment**"

#: ../../sphinx/doc/extdev/tutorial.rst:30
msgid ""
"The build environment object (usually called ``env``) is an instance of "
":class:`.BuildEnvironment`.  It is responsible for parsing the source "
"documents, stores all metadata about the document collection and is "
"serialized to disk after each build."
msgstr ""
"ビルド環境オブジェクト(通常 ``env`` と呼ばれる)は :class:`.BuildEnvironment` "
"のインスタンスです。これはドキュメントソースのパースを行い、ドキュメントセットに関する全てのメタデータを保持し、それらをビルド後にディスクにシリアライズする責任を持っています。"

#: ../../sphinx/doc/extdev/tutorial.rst:35
msgid ""
"Its API provides methods to do with access to metadata, resolving "
"references, etc.  It can also be used by extensions to cache information "
"that should persist for incremental rebuilds."
msgstr ""
"環境オブジェクトはメタデータにアクセスするためのAPIや、参照を解決するAPIなどを持っています。それはまた、拡張から情報のキャッシュとして使われ、それによって漸進的な再ビルドができます。"

#: ../../sphinx/doc/extdev/tutorial.rst:39
msgid ""
"If you have the application or builder object, the environment is available "
"as ``app.env`` or ``builder.env``."
msgstr ""
"もしアプリケーションかビルダーのオブジェクトがあれば、 ``app.env`` や ``builder.env`` "
"のように環境オブジェクトが提供されます。"

#: ../../sphinx/doc/extdev/tutorial.rst:49
msgid "**Builder**"
msgstr "**ビルダー**"

#: ../../sphinx/doc/extdev/tutorial.rst:43
msgid ""
"The builder object (usually called ``builder``) is an instance of a specific"
" subclass of :class:`.Builder`.  Each builder class knows how to convert the"
" parsed documents into an output format, or otherwise process them (e.g. "
"check external links)."
msgstr ""
"ビルダーオブジェクト(通常 ``builder`` と呼ばれる)は :class:`.Builder` "
"のサブクラスのインスタンスです。各ビルダークラスはパースしたドキュメントを使って、出力フォーマットに変換したり、データ処理したりします(例えば、外部リンクのチェックなど)。"

#: ../../sphinx/doc/extdev/tutorial.rst:48
msgid ""
"If you have the application object, the builder is available as "
"``app.builder``."
msgstr "もしアプリケーションオブジェクトがあれば、 ``app.builder`` のようにビルダーオブジェクトが提供されます。"

#: ../../sphinx/doc/extdev/tutorial.rst:57
msgid "**Config**"
msgstr "**Config**"

#: ../../sphinx/doc/extdev/tutorial.rst:52
msgid ""
"The config object (usually called ``config``) provides the values of "
"configuration values set in :file:`conf.py` as attributes.  It is an "
"instance of :class:`.Config`."
msgstr ""
"コンフィグオブジェクト(通常 ``config`` と呼ばれる)は :file:`conf.py` の設定値を属性として提供します。これは "
":class:`.Config` のインスタンスです。"

#: ../../sphinx/doc/extdev/tutorial.rst:56
msgid "The config is available as ``app.config`` or ``env.config``."
msgstr "コンフィグオブジェクトは ``app.config`` や ``env.config`` として提供されます。"

#: ../../sphinx/doc/extdev/tutorial.rst:60
msgid "Build Phases"
msgstr "ビルド・フェーズ"

#: ../../sphinx/doc/extdev/tutorial.rst:62
msgid ""
"One thing that is vital in order to understand extension mechanisms is the "
"way in which a Sphinx project is built: this works in several phases."
msgstr ""
"Sphinxのプロジェクトがビルドされる過程で、拡張機能がどのように実行されるのかということを理解することは、拡張機能の開発をするうえで必要不可欠です。この作業は以下のいくつかのフェーズから構成されています。"

#: ../../sphinx/doc/extdev/tutorial.rst:65
msgid "**Phase 0: Initialization**"
msgstr "**フェーズ 0: 初期化**"

#: ../../sphinx/doc/extdev/tutorial.rst:67
msgid ""
"In this phase, almost nothing of interest to us happens.  The source "
"directory is searched for source files, and extensions are initialized. "
"Should a stored build environment exist, it is loaded, otherwise a new one "
"is created."
msgstr ""
"このフェーズでは拡張作成者にとって面白いものは何もありません。 ソースディレクトリ内のソースファイルを探索し、拡張機能を初期化します。 "
"保存されたビルド環境があればそれをロードし、なければ新しいビルド環境を作成します。"

#: ../../sphinx/doc/extdev/tutorial.rst:72
msgid "**Phase 1: Reading**"
msgstr "**フェーズ 1: 読み込み**"

#: ../../sphinx/doc/extdev/tutorial.rst:74
msgid ""
"In Phase 1, all source files (and on subsequent builds, those that are new "
"or changed) are read and parsed.  This is the phase where directives and "
"roles are encountered by docutils, and the corresponding code is executed.  "
"The output of this phase is a *doctree* for each source file; that is a tree"
" of docutils nodes.  For document elements that aren't fully known until all"
" existing files are read, temporary nodes are created."
msgstr ""
"フェーズ "
"1ではすべてのソースファイルが読み込まれ、パースされます。なお、この後のフェーズは新規のファイルか変更されたファイルに対して実行されます。このフェーズではdocutilsによってディレクティブやロールが処理され、それに対応するコードが実行されます。このフェーズの出力は、ソースファイルごとの\\"
" *doctree*\\ "
"です。これは、docutilsのノードがツリー上に構成されているものです。すべてのファイルを読み込むまでは完全に解釈できないドキュメントの要素に関しては、一時的なノードが作られます。"

#: ../../sphinx/doc/extdev/tutorial.rst:81
msgid ""
"There are nodes provided by docutils, which are documented `in the docutils "
"documentation <http://docutils.sourceforge.net/docs/ref/doctree.html>`__. "
"Additional nodes are provided by Sphinx and :ref:`documented here <nodes>`."
msgstr ""
"docutilsによって提供されるノードがあります。これらは `docutilsのドキュメント <http://docutils.sphinx-"
"users.jp/docutils/docs/ref/doctree.html>`__. "
"で説明されています。追加のノードはSphinxによって提供され、 :ref:`ドキュメントはここ <nodes>` にあります。"

#: ../../sphinx/doc/extdev/tutorial.rst:85
msgid ""
"During reading, the build environment is updated with all meta- and cross "
"reference data of the read documents, such as labels, the names of headings,"
" described Python objects and index entries.  This will later be used to "
"replace the temporary nodes."
msgstr ""
"ソースを読み込んでいる間は、ラベルや見出し名、説明されているPythonオブジェクト、索引のエントリーなどのめたな情報やクロスファンレスの情報がビルド環境に出力されます。これらの情報は、後で一時的なノードと置き換えられます。"

#: ../../sphinx/doc/extdev/tutorial.rst:90
msgid ""
"The parsed doctrees are stored on the disk, because it is not possible to "
"hold all of them in memory."
msgstr "パースされたDOCツリーはすべてのメモリ上で保存しておくことができないため、ディスク上に保存されます。"

#: ../../sphinx/doc/extdev/tutorial.rst:93
msgid "**Phase 2: Consistency checks**"
msgstr "**フェーズ 2: 一貫性チェック**"

#: ../../sphinx/doc/extdev/tutorial.rst:95
msgid "Some checking is done to ensure no surprises in the built documents."
msgstr "ビルドされたドキュメントの中に、びっくりするようなものがないか、いくつかのチェックを行います。"

#: ../../sphinx/doc/extdev/tutorial.rst:97
msgid "**Phase 3: Resolving**"
msgstr "**フェーズ 3: 解決**"

#: ../../sphinx/doc/extdev/tutorial.rst:99
msgid ""
"Now that the metadata and cross-reference data of all existing documents is "
"known, all temporary nodes are replaced by nodes that can be converted into "
"output using components called tranform.  For example, links are created for"
" object references that exist, and simple literal nodes are created for "
"those that don't."
msgstr ""
"すべてのドキュメントからメタデータ、およびクロスリファレンスのデータが得られているので、transformと呼ばれるコンポーネントを用いて，ここで一時的なノードを出力可能なノードに置き換えていきます。例えば、存在するオブジェクトへの参照があればリンクが作成されます。リンク先が存在しないものはシンプルなリテラル(等幅)のノードが作成されます。"

#: ../../sphinx/doc/extdev/tutorial.rst:105
msgid "**Phase 4: Writing**"
msgstr "**フェーズ 4: 書き出し**"

#: ../../sphinx/doc/extdev/tutorial.rst:107
msgid ""
"This phase converts the resolved doctrees to the desired output format, such"
" as HTML or LaTeX.  This happens via a so-called docutils writer that visits"
" the individual nodes of each doctree and produces some output in the "
"process."
msgstr ""
"このフェーズでは参照が解決されたDOCツリーを、HTMLやLaTeXなどの指定された出力フォーマットに変換します。このプロセス中では、docutilsのライターと呼ばれるものがDOCツリーの個々のノードをたどって、出力を行っていきます。"

#: ../../sphinx/doc/extdev/tutorial.rst:113
msgid ""
"Some builders deviate from this general build plan, for example, the builder"
" that checks external links does not need anything more than the parsed "
"doctrees and therefore does not have phases 2--4."
msgstr ""
"いくつかのビルダーの中には、この一般的なビルド計画から外れているものもあります。 "
"例えば、外部リンクチェックのビルダーはdoctreeのパースをする以上の情報は不要なので、フェーズ2～4を行いません。"

#: ../../sphinx/doc/extdev/tutorial.rst:119
msgid "Extension Design"
msgstr "拡張のデザイン"

#: ../../sphinx/doc/extdev/tutorial.rst:121
msgid "We want the extension to add the following to Sphinx:"
msgstr "以下のような拡張機能をSphinxに追加したいと考えているとします:"

#: ../../sphinx/doc/extdev/tutorial.rst:123
msgid ""
"A \"todo\" directive, containing some content that is marked with \"TODO\", "
"and only shown in the output if a new config value is set.  (Todo entries "
"should not be in the output by default.)"
msgstr ""
"\"todo\"ディレクティブは、\"TODO\"としてやらなければならないことをコンテンツとして持ち、新しい設定値で表示するように指定されたときだけ表示します。デフォルトではtodoのエントリーは表示されないようにします。"

#: ../../sphinx/doc/extdev/tutorial.rst:127
msgid ""
"A \"todolist\" directive that creates a list of all todo entries throughout "
"the documentation."
msgstr "\"todolist\"ディレクティブがあると、全ドキュメントに含まれるTodoの項目を集めて、リストを作成します。"

#: ../../sphinx/doc/extdev/tutorial.rst:130
msgid "For that, we will need to add the following elements to Sphinx:"
msgstr "これを実現するためには、Sphinxに以下の項目を追加する必要があるでしょう:"

#: ../../sphinx/doc/extdev/tutorial.rst:132
msgid "New directives, called ``todo`` and ``todolist``."
msgstr "``todo``, ``todolist``\\ と呼ばれる新しいディレクティブ"

#: ../../sphinx/doc/extdev/tutorial.rst:133
msgid ""
"New document tree nodes to represent these directives, conventionally also "
"called ``todo`` and ``todolist``.  We wouldn't need new nodes if the new "
"directives only produced some content representable by existing nodes."
msgstr ""
"``todo``, ``todolist``\\ "
"というディレクティブが使用された場合に、それを表現する慣習的な新しいドキュメントツリーのノード。もしも、新しいディレクティブが、既存のノードで表現可能なものだけを生成するのであれば、新しいノードを作成する必要はありません。"

#: ../../sphinx/doc/extdev/tutorial.rst:136
msgid ""
"A new config value ``todo_include_todos`` (config value names should start "
"with the extension name, in order to stay unique) that controls whether todo"
" entries make it into the output."
msgstr ""
"``todo_include_todos``\\ "
"という新しい設定値。設定値の名前は、一意性を保つために拡張名から始まる名前にしてください。この設定値はtodoのエントリーが、出力を行うかどうかを判断します"

#: ../../sphinx/doc/extdev/tutorial.rst:139
msgid ""
"New event handlers: one for the :event:`doctree-resolved` event, to replace "
"the todo and todolist nodes, and one for :event:`env-purge-doc` (the reason "
"for that will be covered later)."
msgstr ""
"新しいイベントハンドラ。一つはtodoとtodolistのノードを置き換えるための :event:`doctree-resolved` "
"イベントハンドラで、もう一つは  :event:`env-purge-doc` (理由は後で説明します)です。"

#: ../../sphinx/doc/extdev/tutorial.rst:145
msgid "The Setup Function"
msgstr "setup関数"

#: ../../sphinx/doc/extdev/tutorial.rst:149
msgid ""
"The new elements are added in the extension's setup function.  Let us create"
" a new Python module called :file:`todo.py` and add the setup function::"
msgstr ""
"新しい要素は、拡張の中のsetup関数の中で追加していきます。まずは :file:`todo.py` "
"という新しいPythonのモジュールを作成して、以下のようなsetup関数を追加しましょう::"

#: ../../sphinx/doc/extdev/tutorial.rst:168
msgid ""
"The calls in this function refer to classes and functions not yet written.  "
"What the individual calls do is the following:"
msgstr ""
"この関数の中で参照されているクラスと関数の中には、まだ説明していないものもあります。呼ばれているものが個々に何をしているか、というのを順番に説明していきます:"

#: ../../sphinx/doc/extdev/tutorial.rst:171
msgid ""
":meth:`~Sphinx.add_config_value` lets Sphinx know that it should recognize "
"the new *config value* ``todo_include_todos``, whose default value should be"
" ``False`` (this also tells Sphinx that it is a boolean value)."
msgstr ""
":meth:`~Sphinx.add_config_value` メソッドはSphinxに対して新しい\\ *設定値*\\ である\\  "
"``todo_include_todos``\\ を追加するように指示して、 :file:`conf.py` "
"の中に書けるようにします。このオプションのデフォルト値は\\ ``False``\\ "
"になります。また、この設定値がブーリアンの値を取るということもSphinxに知らせます。"

#: ../../sphinx/doc/extdev/tutorial.rst:175
msgid ""
"If the third argument was ``'html'``, HTML documents would be full rebuild "
"if the config value changed its value.  This is needed for config values "
"that influence reading (build phase 1)."
msgstr ""
"もしも3番目の引数が\\ ``'html'``\\ "
"の場合には、設定値が変更された場合にHTMLドキュメントが完全に再ビルドされます。この引数は、設定値がフェーズ.1の読み込みに対して影響を与えるかどうかを指定するのに必要です。"

#: ../../sphinx/doc/extdev/tutorial.rst:179
msgid ""
":meth:`~Sphinx.add_node` adds a new *node class* to the build system.  It "
"also can specify visitor functions for each supported output format.  These "
"visitor functions are needed when the new nodes stay until phase 4 -- since "
"the ``todolist`` node is always replaced in phase 3, it doesn't need any."
msgstr ""
":meth:`~Sphinx.add_node` メソッドは、ビルドシステムに対して新しい\\ *ノードクラス*\\ "
"を追加します。このメソッドはサポートする出力形式ごとにビジター関数を定義できます。これらのビジター関数は新しいノードがフェーズ.4まで残っている場合に必要になります。\\"
" ``todolist``\\ はフェーズ.3までにすべて置き換えられてしまうため、ビジターを指定する必要はありません。"

#: ../../sphinx/doc/extdev/tutorial.rst:184
msgid ""
"We need to create the two node classes ``todo`` and ``todolist`` later."
msgstr "後ほど、 ``todo`` と ``todolist`` という2つのnodeクラスを作成します。"

#: ../../sphinx/doc/extdev/tutorial.rst:186
msgid ""
":meth:`~Sphinx.add_directive` adds a new *directive*, given by name and "
"class."
msgstr ""
":meth:`~Sphinx.add_directive` メソッドは、指定された名前とクラスから、新しい\\ *ディレクティブ*\\ を追加します。"

#: ../../sphinx/doc/extdev/tutorial.rst:188
msgid "The handler functions are created later."
msgstr "ハンドラー関数は後で作成します。"

#: ../../sphinx/doc/extdev/tutorial.rst:190
msgid ""
"Finally, :meth:`~Sphinx.connect` adds an *event handler* to the event whose "
"name is given by the first argument.  The event handler function is called "
"with several arguments which are documented with the event."
msgstr ""
"最後に、 :meth:`~Sphinx.connect` メソッドは、最初の引数に指定されたイベントの名前に対する、\\ *イベントハンドラ*\\ "
"を追加します。イベントハンドラの関数は、ドキュメントに関する引数をいくつか伴って呼び出されます。"

#: ../../sphinx/doc/extdev/tutorial.rst:196
msgid "The Node Classes"
msgstr "ノードクラス"

#: ../../sphinx/doc/extdev/tutorial.rst:198
msgid "Let's start with the node classes::"
msgstr "それではノードクラスを実装していきます::"

#: ../../sphinx/doc/extdev/tutorial.rst:214
msgid ""
"Node classes usually don't have to do anything except inherit from the "
"standard docutils classes defined in :mod:`docutils.nodes`.  ``todo`` "
"inherits from ``Admonition`` because it should be handled like a note or "
"warning, ``todolist`` is just a \"general\" node."
msgstr ""
"ノードクラスは :mod:`docutils.nodes` "
"の中で定義されているdocutilsの標準クラスを継承する以外には何もやる必要はありません。\\ ``todo``\\ は\\ ``note``\\ "
"や\\ ``warning``\\ のように使用されなければならないため、\\ ``Admonition``\\ クラスを定義しています。\\ "
"``todolist``\\ は単なる\"一般\"ノードです。"

#: ../../sphinx/doc/extdev/tutorial.rst:221
msgid ""
"Many extensions will not have to create their own node classes and work fine"
" with the nodes already provided by `docutils "
"<http://docutils.sourceforge.net/docs/ref/doctree.html>`__ and :ref:`Sphinx "
"<nodes>`."
msgstr ""
"多くの拡張は独自のノードクラスを実装する必要はなく、  `docutils <http://docutils.sphinx-"
"users.jp/docutils/docs/ref/doctree.html>`__ と :ref:`Sphinx <nodes>` "
"が提供するノードを使えば良いでしょう。"

#: ../../sphinx/doc/extdev/tutorial.rst:228
msgid "The Directive Classes"
msgstr "ディレクティブクラス"

#: ../../sphinx/doc/extdev/tutorial.rst:230
msgid ""
"A directive class is a class deriving usually from "
":class:`docutils.parsers.rst.Directive`.  The directive interface is also "
"covered in detail in the `docutils documentation`_; the important thing is "
"that the class should have attributes that configure the allowed markup, and"
" a ``run`` method that returns a list of nodes."
msgstr ""
"directiveクラスは通常 :class:`docutils.parsers.rst.Directive` "
"から派生します。ディレクティブのインタフェースの詳細は `docutils documentation`_ "
"でも述べられています。重要なこととして、そのクラスはマークアップに許される設定のための属性と、ノードのリストを返す ``run`` "
"メソッドを持たせるということです。"

#: ../../sphinx/doc/extdev/tutorial.rst:236
msgid "The ``todolist`` directive is quite simple::"
msgstr "``todolist``\\ ディレクティブはきわめてシンプルです::"

#: ../../sphinx/doc/extdev/tutorial.rst:245
msgid ""
"An instance of our ``todolist`` node class is created and returned.  The "
"todolist directive has neither content nor arguments that need to be "
"handled."
msgstr ""
"``todolist``\\ ノードクラスのインスタンスを作って返しています。\\ ``todolist``\\ "
"ディレクティブでは、コンテンツも引数も取り扱う必要はありません。"

#: ../../sphinx/doc/extdev/tutorial.rst:248
msgid "The ``todo`` directive function looks like this::"
msgstr "``todo``\\ ディレクティブのクラスは以下のようになります::"

#: ../../sphinx/doc/extdev/tutorial.rst:278
msgid ""
"Several important things are covered here. First, as you can see, you can "
"refer to the build environment instance using "
"``self.state.document.settings.env``."
msgstr ""
"拡張機能の作成にあたって重要なことがこのクラスでカバーされています。まず最初に、見てわかるように、\\ "
"``self.state.document.settings.env``\\ を通じて、ビルド環境のインスタンスを参照できるということです。"

#: ../../sphinx/doc/extdev/tutorial.rst:281
msgid ""
"Then, to act as a link target (from the todolist), the todo directive needs "
"to return a target node in addition to the todo node.  The target ID (in "
"HTML, this will be the anchor name) is generated by using "
"``env.new_serialno`` which returns a new unique integer on each call and "
"therefore leads to unique target names.  The target node is instantiated "
"without any text (the first two arguments)."
msgstr ""
"ですので、(``todolist`` からの)リンクターゲットとして動作させるためには、 ``todo`` ディレクティブが ``todo`` "
"ノードだけでなく、ターゲットとなるノードを返す必要があります。ターゲットのIDは ``env.new_serialno`` "
"を使用して作成されます(HTMLではアンカー名になります)。それぞれの呼び出しごとに、ユニークなターゲット名になるような、ユニークな数値を返します。ターゲットノードは、あらゆるテキスト(最初の二つの引数)を受け取ることなく、インスタンス化されます。"

#: ../../sphinx/doc/extdev/tutorial.rst:288
msgid ""
"On creating admonition node, the content body of the directive are parsed "
"using ``self.state.nested_parse``.  The first argument gives the content "
"body, and the second one gives content offset.  The third argument gives the"
" parent node of parsed result, in our case the ``todo`` node."
msgstr ""
"admonition(勧告)ノードを作成すると，ディレクティブのコンテントの本体（body）は ``self.state.nested_parse`` "
"を使ってパースされます。最初の引数はコンテントの本体であり、2番目の引数はコンテントのオフセットです。３番目の引数はパースされた結果の親ノードです。今回のケースでは、"
" ``todo`` ノードになります。"

#: ../../sphinx/doc/extdev/tutorial.rst:293
msgid ""
"Then, the todo node is added to the environment.  This is needed to be able "
"to create a list of all todo entries throughout the documentation, in the "
"place where the author puts a ``todolist`` directive.  For this case, the "
"environment attribute ``todo_all_todos`` is used (again, the name should be "
"unique, so it is prefixed by the extension name).  It does not exist when a "
"new environment is created, so the directive must check and create it if "
"necessary.  Various information about the todo entry's location are stored "
"along with a copy of the node."
msgstr ""
"``todo``\\ "
"ノードが環境に追加されました。これは全ドキュメントのToDoのエントリーのリストを作成できるようにするために必要なものです。ここで作ったリストは\\ "
"``todolist``\\ ディレクティブが置かれているところに出力されます。この場合、環境の属性の\\ ``todo_all_todos``\\ "
"が使用されます。繰り返しになりますが、名前の重複を避けるために、属性名の頭には拡張名を設定します。新しい環境が作成されたときにはまだ存在していないため、ディレクティブの中では必要に応じてあるかどうかチェックを行い、作成する必要があります。ToDoエントリーの位置に関するさまざまな情報がノードのコピーの中に保存されます。"

#: ../../sphinx/doc/extdev/tutorial.rst:302
msgid ""
"In the last line, the nodes that should be put into the doctree are "
"returned: the target node and the admonition node."
msgstr "最後の行では、作成したターゲットノードと、AdmonitionノードをDOCツリーの中に配置するために、returnで返しています。"

#: ../../sphinx/doc/extdev/tutorial.rst:305
msgid "The node structure that the directive returns looks like this::"
msgstr "ディレクティブが返すノード構造は以下のようになっています::"

#: ../../sphinx/doc/extdev/tutorial.rst:323
msgid "The Event Handlers"
msgstr "イベントハンドラ"

#: ../../sphinx/doc/extdev/tutorial.rst:325
msgid ""
"Finally, let's look at the event handlers.  First, the one for the :event"
":`env-purge-doc` event::"
msgstr "最後に、イベントハンドラを見ていきます。最初に見るのは :event:`env-purge-doc` イベントです::"

#: ../../sphinx/doc/extdev/tutorial.rst:334
msgid ""
"Since we store information from source files in the environment, which is "
"persistent, it may become out of date when the source file changes.  "
"Therefore, before each source file is read, the environment's records of it "
"are cleared, and the :event:`env-purge-doc` event gives extensions a chance "
"to do the same. Here we clear out all todos whose docname matches the given "
"one from the ``todo_all_todos`` list.  If there are todos left in the "
"document, they will be added again during parsing."
msgstr ""
"ソースファイルの中から情報を取り出し、環境の中に格納しましたが、これは永続化されます。そのため、ソースファイルが変更されると古い情報になってしまう可能性があります。そのため、それぞれのソースファイルを読み込む前に、環境の記録をクリアしています。"
" :event:`env-purge-doc` イベントは、拡張機能の中でそのような作業を行うのに適した場所になります。ここでは\\ "
"``todo_all_todos``\\ "
"のリストの中の項目のうち、ドキュメントの名前(``docname``)がマッチしたものを削除しています。もしもドキュメント内のToDoが残っていたとしたら、パース時に重複して追加されてしまいます。"

#: ../../sphinx/doc/extdev/tutorial.rst:342
msgid ""
"The other handler belongs to the :event:`doctree-resolved` event.  This "
"event is emitted at the end of phase 3 and allows custom resolving to be "
"done::"
msgstr ""
"もう一つ :event:`doctree-resolved` "
"イベントに関連したハンドラが定義されています。このイベントはフェーズ.3が完了したところで発生(emit)します。解決処理を独自に実装できるようになります::"

#: ../../sphinx/doc/extdev/tutorial.rst:386
msgid ""
"It is a bit more involved.  If our new \"todo_include_todos\" config value "
"is false, all todo and todolist nodes are removed from the documents."
msgstr ""
"このコードは多少込み入っています。もしも新しい設定値である\\ ``\"todo_include_todos\"``\\ "
"がfalseの場合には、すべてのtodoおよび、todolistのノードをドキュメントから削除します。"

#: ../../sphinx/doc/extdev/tutorial.rst:389
msgid ""
"If not, todo nodes just stay where and how they are.  Todolist nodes are "
"replaced by a list of todo entries, complete with backlinks to the location "
"where they come from.  The list items are composed of the nodes from the "
"todo entry and docutils nodes created on the fly: a paragraph for each "
"entry, containing text that gives the location, and a link (reference node "
"containing an italic node) with the backreference.  The reference URI is "
"built by ``app.builder.get_relative_uri`` which creates a suitable URI "
"depending on the used builder, and appending the todo node's (the target's) "
"ID as the anchor name."
msgstr ""
"trueの場合にはtodoのノードはその場に保持されます。todolistノードはtodoのエントリーのリストに置き換えられ、定義された場所への逆リンクが張られます。リストアイテムはtodoエントリーのノードの内容から作成され、その場でdocutilsのノードが作成されます。エントリーごとに段落が作られます。段落の中には定義された位置を表すテキストと逆参照のためのリンクが含まれます。また参照はイタリック体のノードの中に定義されます。参照のリンクは\\"
" ``app.builder.get_relative_uri``\\ "
"関数によって作成されます。これはビルダーごとに適したURIを作成します。リンクには、ノードのターゲットのIDがアンカー名として追加されています。"
