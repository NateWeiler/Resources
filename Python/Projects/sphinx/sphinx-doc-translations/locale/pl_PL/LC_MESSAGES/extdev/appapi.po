# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2020, Georg Brandl and the Sphinx team
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 4.0.0+/d9280e253\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-13 23:32+0000\n"
"PO-Revision-Date: 2018-02-12 13:48+0000\n"
"Language-Team: Polish (Poland) (https://www.transifex.com/sphinx-doc/teams/15434/pl_PL/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pl_PL\n"
"Plural-Forms: nplurals=4; plural=(n==1 ? 0 : (n%10>=2 && n%10<=4) && (n%100<12 || n%100>14) ? 1 : n!=1 && (n%10>=0 && n%10<=1) || (n%10>=5 && n%10<=9) || (n%100>=12 && n%100<=14) ? 2 : 3);\n"

#: ../../sphinx/doc/extdev/appapi.rst:4
msgid "Application API"
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:10
msgid ""
"Each Sphinx extension is a Python module with at least a :func:`setup` "
"function.  This function is called at initialization time with one argument,"
" the application object representing the Sphinx process."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:16
msgid "This application object has the public API described in the following."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:19
msgid "Extension setup"
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:21
msgid ""
"These methods are usually called in an extension's ``setup()`` function."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:23
msgid ""
"Examples of using the Sphinx extension API can be seen in the "
":mod:`sphinx.ext` package."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.setup_extension:1
msgid "Import and setup a Sphinx extension module."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.setup_extension:3
msgid ""
"Load the extension given by the module *name*.  Use this if your extension "
"needs the features provided by another extension.  No-op if called twice."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.require_sphinx:1
msgid "Check the Sphinx version if requested."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.require_sphinx:3
msgid ""
"Compare *version* (which must be a ``major.minor`` version string, e.g. "
"``'1.1'``) with the version of the running Sphinx, and abort the build when "
"it is too old."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.connect:1
msgid "Register *callback* to be called when *event* is emitted."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.connect:3
msgid ""
"For details on available core events and the arguments of callback "
"functions, please see :ref:`events`."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.connect:6
msgid ""
"Registered callbacks will be invoked on event in the order of *priority* and"
" registration.  The priority is ascending order."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.connect:9
msgid ""
"The method returns a \"listener ID\" that can be used as an argument to "
":meth:`disconnect`."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.connect:14
msgid "Support *priority*"
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.disconnect:1
msgid "Unregister callback by *listener_id*."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_builder:1
msgid "Register a new builder."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_builder:3
msgid ""
"*builder* must be a class that inherits from "
":class:`~sphinx.builders.Builder`."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_builder:5
msgid ""
"If *override* is True, the given *builder* is forcedly installed even if a "
"builder having the same name is already installed."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_builder:8
#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.set_translator:11
#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_directive:38
#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_role:11
#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_generic_role:10
#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_domain:10
#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_directive_to_domain:10
#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_role_to_domain:10
#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_index_to_domain:10
#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_object_type:57
#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_crossref_type:30
#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_autodocumenter:15
#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_source_parser:10
msgid "Add *override* keyword."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_config_value:1
msgid "Register a configuration value."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_config_value:3
msgid ""
"This is necessary for Sphinx to recognize new values and set default values "
"accordingly.  The *name* should be prefixed with the extension name, to "
"avoid clashes.  The *default* value can be any Python object. The string "
"value *rebuild* must be one of those values:"
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_config_value:8
msgid ""
"``'env'`` if a change in the setting only takes effect when a document is "
"parsed -- this means that the whole environment must be rebuilt."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_config_value:11
msgid ""
"``'html'`` if a change in the setting needs a full rebuild of HTML "
"documents."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_config_value:13
msgid "``''`` if a change in the setting will not need any special rebuild."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_config_value:15
msgid ""
"Changed *rebuild* from a simple boolean (equivalent to ``''`` or ``'env'``) "
"to a string.  However, booleans are still accepted and converted internally."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_config_value:20
msgid ""
"If the *default* value is a callable, it will be called with the config "
"object as its argument in order to get the default value. This can be used "
"to implement config values whose default depends on other values."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_event:1
msgid "Register an event called *name*."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_event:3
msgid "This is needed to be able to emit it."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.set_translator:1
msgid "Register or override a Docutils translator class."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.set_translator:3
msgid ""
"This is used to register a custom output translator or to replace a builtin "
"translator.  This allows extensions to use custom translator and define "
"custom nodes for the translator (see :meth:`add_node`)."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.set_translator:7
msgid ""
"If *override* is True, the given *translator_class* is forcedly installed "
"even if a translator for *name* is already installed."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_node:1
msgid "Register a Docutils node class."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_node:3
msgid ""
"This is necessary for Docutils internals.  It may also be used in the future"
" to validate nodes in the parsed documents."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_node:6
msgid ""
"Node visitor functions for the Sphinx HTML, LaTeX, text and manpage writers "
"can be given as keyword arguments: the keyword should be one or more of "
"``'html'``, ``'latex'``, ``'text'``, ``'man'``, ``'texinfo'`` or any other "
"supported translators, the value a 2-tuple of ``(visit, depart)`` methods.  "
"``depart`` can be ``None`` if the ``visit`` function raises "
":exc:`docutils.nodes.SkipNode`.  Example:"
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_node:24
msgid ""
"Obviously, translators for which you don't specify visitor methods will "
"choke on the node when encountered in a document to translate."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_node:27
#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_enumerable_node:22
msgid ""
"If *override* is True, the given *node* is forcedly installed even if a node"
" having the same name is already installed."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_node:30
msgid "Added the support for keyword arguments giving visit functions."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_enumerable_node:1
msgid "Register a Docutils node class as a numfig target."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_enumerable_node:3
msgid ""
"Sphinx numbers the node automatically. And then the users can refer it using"
" :rst:role:`numref`."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_enumerable_node:6
msgid ""
"*figtype* is a type of enumerable nodes.  Each figtypes have individual "
"numbering sequences.  As a system figtypes, ``figure``, ``table`` and "
"``code-block`` are defined.  It is able to add custom nodes to these default"
" figtypes.  It is also able to define new custom figtype if new figtype is "
"given."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_enumerable_node:12
msgid ""
"*title_getter* is a getter function to obtain the title of node.  It takes "
"an instance of the enumerable node, and it must return its title as string."
"  The title is used to the default title of references for :rst:role:`ref`."
"  By default, Sphinx searches ``docutils.nodes.caption`` or "
"``docutils.nodes.title`` from the node as a title."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_enumerable_node:19
msgid ""
"Other keyword arguments are used for node visitor functions. See the "
":meth:`.Sphinx.add_node` for details."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_directive:1
msgid "Register a Docutils directive."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_directive:3
msgid ""
"*name* must be the prospective directive name.  *cls* is a directive class "
"which inherits ``docutils.parsers.rst.Directive``.  For more details, see "
"`the Docutils docs <http://docutils.sourceforge.net/docs/howto/rst-"
"directives.html>`_ ."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_directive:8
msgid ""
"For example, a custom directive named ``my-directive`` would be added like "
"this:"
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_directive:31
msgid ""
"If *override* is True, the given *cls* is forcedly installed even if a "
"directive named as *name* is already installed."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_directive:34
msgid "Docutils 0.5-style directive classes are now supported."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_directive:36
msgid "Docutils 0.4-style (function based) directives support is deprecated."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_role:1
msgid "Register a Docutils role."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_role:3
msgid ""
"*name* must be the role name that occurs in the source, *role* the role "
"function. Refer to the `Docutils documentation "
"<http://docutils.sourceforge.net/docs/howto/rst-roles.html>`_ for more "
"information."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_role:8
#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_role_to_domain:6
msgid ""
"If *override* is True, the given *role* is forcedly installed even if a role"
" named as *name* is already installed."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_generic_role:1
msgid "Register a generic Docutils role."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_generic_role:3
msgid ""
"Register a Docutils role that does nothing but wrap its contents in the node"
" given by *nodeclass*."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_generic_role:6
msgid ""
"If *override* is True, the given *nodeclass* is forcedly installed even if a"
" role named as *name* is already installed."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_domain:1
msgid "Register a domain."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_domain:3
msgid ""
"Make the given *domain* (which must be a class; more precisely, a subclass "
"of :class:`~sphinx.domains.Domain`) known to Sphinx."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_domain:6
msgid ""
"If *override* is True, the given *domain* is forcedly installed even if a "
"domain having the same name is already installed."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_directive_to_domain:1
msgid "Register a Docutils directive in a domain."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_directive_to_domain:3
msgid ""
"Like :meth:`add_directive`, but the directive is added to the domain named "
"*domain*."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_directive_to_domain:6
msgid ""
"If *override* is True, the given *directive* is forcedly installed even if a"
" directive named as *name* is already installed."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_role_to_domain:1
msgid "Register a Docutils role in a domain."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_role_to_domain:3
msgid ""
"Like :meth:`add_role`, but the role is added to the domain named *domain*."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_index_to_domain:1
msgid "Register a custom index for a domain."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_index_to_domain:3
msgid ""
"Add a custom *index* class to the domain named *domain*.  *index* must be a "
"subclass of :class:`~sphinx.domains.Index`."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_index_to_domain:6
msgid ""
"If *override* is True, the given *index* is forcedly installed even if an "
"index having the same name is already installed."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_object_type:1
msgid "Register a new object type."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_object_type:3
msgid ""
"This method is a very convenient way to add a new :term:`object` type that "
"can be cross-referenced.  It will do this:"
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_object_type:6
msgid ""
"Create a new directive (called *directivename*) for documenting an object.  "
"It will automatically add index entries if *indextemplate* is nonempty; if "
"given, it must contain exactly one instance of ``%s``.  See the example "
"below for how the template will be interpreted."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_object_type:11
msgid ""
"Create a new role (called *rolename*) to cross-reference to these object "
"descriptions."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_object_type:13
msgid ""
"If you provide *parse_node*, it must be a function that takes a string and a"
" docutils node, and it must populate the node with children parsed from the "
"string.  It must then return the name of the item to be used in cross-"
"referencing and index entries.  See the :file:`conf.py` file in the source "
"for this documentation for an example."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_object_type:19
msgid ""
"The *objname* (if not given, will default to *directivename*) names the type"
" of object.  It is used when listing objects, e.g. in search results."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_object_type:23
msgid "For example, if you have this call in a custom Sphinx extension::"
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_object_type:27
msgid "you can use this markup in your documents::"
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_object_type:37
msgid ""
"For the directive, an index entry will be generated as if you had prepended "
"::"
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_object_type:41
msgid ""
"The reference node will be of class ``literal`` (so it will be rendered in a"
" proportional font, as appropriate for code) unless you give the "
"*ref_nodeclass* argument, which must be a docutils node class.  Most useful "
"are ``docutils.nodes.emphasis`` or ``docutils.nodes.strong`` -- you can also"
" use ``docutils.nodes.generated`` if you want no further text decoration.  "
"If the text should be treated as literal (e.g. no smart quote replacement), "
"but not have typewriter styling, use ``sphinx.addnodes.literal_emphasis`` or"
" ``sphinx.addnodes.literal_strong``."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_object_type:51
msgid ""
"For the role content, you have the same syntactical possibilities as for "
"standard Sphinx roles (see :ref:`xref-syntax`)."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_object_type:54
msgid ""
"If *override* is True, the given object_type is forcedly installed even if "
"an object_type having the same name is already installed."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_crossref_type:1
msgid "Register a new crossref object type."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_crossref_type:3
msgid ""
"This method is very similar to :meth:`add_object_type` except that the "
"directive it generates must be empty, and will produce no output."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_crossref_type:6
msgid ""
"That means that you can add semantic targets to your sources, and refer to "
"them using custom roles instead of generic ones (like :rst:role:`ref`).  "
"Example call::"
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_crossref_type:13
msgid "Example usage::"
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_crossref_type:24
msgid ""
"(Of course, the element following the ``topic`` directive needn't be a "
"section.)"
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_crossref_type:27
msgid ""
"If *override* is True, the given crossref_type is forcedly installed even if"
" a crossref_type having the same name is already installed."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_transform:1
msgid "Register a Docutils transform to be applied after parsing."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_transform:3
msgid ""
"Add the standard docutils :class:`Transform` subclass *transform* to the "
"list of transforms that are applied after Sphinx parses a reST document."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_transform:7
msgid "priority range categories for Sphinx transforms"
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_transform:10
msgid "Priority"
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_transform:11
msgid "Main purpose in Sphinx"
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_transform:12
msgid "0-99"
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_transform:13
msgid "Fix invalid nodes by docutils. Translate a doctree."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_transform:14
msgid "100-299"
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_transform:15
msgid "Preparation"
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_transform:16
msgid "300-399"
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_transform:17
msgid "early"
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_transform:18
msgid "400-699"
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_transform:19
msgid "main"
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_transform:20
msgid "700-799"
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_transform:21
msgid "Post processing. Deadline to modify text and referencing."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_transform:22
msgid "800-899"
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_transform:23
msgid "Collect referencing and referenced nodes. Domain processing."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_transform:24
msgid "900-999"
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_transform:25
msgid "Finalize and clean up."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_transform:27
msgid "refs: `Transform Priority Range Categories`__"
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_post_transform:1
msgid "Register a Docutils transform to be applied before writing."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_post_transform:3
msgid ""
"Add the standard docutils :class:`Transform` subclass *transform* to the "
"list of transforms that are applied before Sphinx writes a document."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_js_file:1
msgid "Register a JavaScript file to include in the HTML output."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_js_file:3
msgid ""
"Add *filename* to the list of JavaScript files that the default HTML "
"template will include.  The filename must be relative to the HTML static "
"path , or a full URI with scheme.  If the keyword argument ``body`` is "
"given, its value will be added between the ``<script>`` tags. Extra keyword "
"arguments are included as attributes of the ``<script>`` tag."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_js_file:10
#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_css_file:8
msgid "Example::"
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_js_file:23
msgid ""
"Renamed from ``app.add_javascript()``. And it allows keyword arguments as "
"attributes of script tag."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_css_file:1
msgid "Register a stylesheet to include in the HTML output."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_css_file:3
msgid ""
"Add *filename* to the list of CSS files that the default HTML template will "
"include.  The filename must be relative to the HTML static path, or a full "
"URI with scheme.  The keyword arguments are also accepted for attributes of "
"``<link>`` tag."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_css_file:23
msgid ""
"Optional ``alternate`` and/or ``title`` attributes can be supplied with the "
"*alternate* (of boolean type) and *title* (a string) arguments. The default "
"is no title and *alternate* = ``False``. For more information, refer to the "
"`documentation <https://mdn.io/Web/CSS/Alternative_style_sheets>`__."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_css_file:30
msgid ""
"Renamed from ``app.add_stylesheet()``. And it allows keyword arguments as "
"attributes of link tag."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_latex_package:1
msgid "Register a package to include in the LaTeX source code."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_latex_package:3
msgid ""
"Add *packagename* to the list of packages that LaTeX source code will "
"include.  If you provide *options*, it will be taken to `\\usepackage` "
"declaration.  If you set *after_hyperref* truthy, the package will be loaded"
" after ``hyperref`` package."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_latex_package:18
msgid "*after_hyperref* option."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_lexer:1
msgid "Register a new lexer for source code."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_lexer:3
msgid "Use *lexer* to highlight code blocks with the given language *alias*."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_lexer:6
msgid ""
"Take a lexer class as an argument.  An instance of lexers are still "
"supported until Sphinx-3.x."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_autodocumenter:1
msgid "Register a new documenter class for the autodoc extension."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_autodocumenter:3
msgid ""
"Add *cls* as a new documenter class for the :mod:`sphinx.ext.autodoc` "
"extension.  It must be a subclass of :class:`sphinx.ext.autodoc.Documenter`."
"  This allows to auto-document new types of objects.  See the source of the "
"autodoc module for examples on how to subclass :class:`Documenter`."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_autodocumenter:9
msgid ""
"If *override* is True, the given *cls* is forcedly installed even if a "
"documenter having the same name is already installed."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_autodocumenter:12
msgid "Todo"
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_autodocumenter:12
msgid "Add real docs for Documenter and subclassing"
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_autodoc_attrgetter:1
msgid "Register a new ``getattr``-like function for the autodoc extension."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_autodoc_attrgetter:3
msgid ""
"Add *getter*, which must be a function with an interface compatible to the "
":func:`getattr` builtin, as the autodoc attribute getter for objects that "
"are instances of *typ*.  All cases where autodoc needs to get an attribute "
"of a type are then handled by this function instead of :func:`getattr`."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_search_language:1
msgid "Register a new language for the HTML search index."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_search_language:3
msgid ""
"Add *cls*, which must be a subclass of "
":class:`sphinx.search.SearchLanguage`, as a support language for building "
"the HTML full-text search index.  The class must have a *lang* attribute "
"that indicates the language it should be used for.  See "
":confval:`html_search_language`."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_source_suffix:1
msgid "Register a suffix of source files."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_source_suffix:3
msgid ""
"Same as :confval:`source_suffix`.  The users can override this using the "
"setting."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_source_suffix:6
msgid ""
"If *override* is True, the given *suffix* is forcedly installed even if a "
"same suffix is already installed."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_source_parser:1
msgid "Register a parser class."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_source_parser:3
msgid ""
"If *override* is True, the given *parser* is forcedly installed even if a "
"parser for the same suffix is already installed."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_source_parser:7
msgid ""
"*suffix* argument is deprecated.  It only accepts *parser* argument. Use "
":meth:`add_source_suffix` API to register suffix instead."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_env_collector:1
msgid "Register an environment collector class."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_env_collector:3
msgid "Refer to :ref:`collector-api`."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_html_theme:1
msgid "Register a HTML Theme."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_html_theme:3
msgid ""
"The *name* is a name of theme, and *path* is a full path to the theme (refs:"
" :ref:`distribute-your-theme`)."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_html_math_renderer:1
msgid "Register a math renderer for HTML."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_html_math_renderer:3
msgid ""
"The *name* is a name of math renderer.  Both *inline_renderers* and "
"*block_renderers* are used as visitor functions for the HTML writer: the "
"former for inline math node (``nodes.math``), the latter for block math node"
" (``nodes.math_block``).  Regarding visitor functions, see :meth:`add_node` "
"for details."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_message_catalog:1
msgid "Register a message catalog."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.add_message_catalog:3
msgid ""
"The *catalog* is a name of catalog, and *locale_dir* is a base path of "
"message catalog.  For more details, see "
":func:`sphinx.locale.get_translation()`."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.is_parallel_allowed:1
msgid "Check parallel processing is allowed or not."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.is_parallel_allowed:3
msgid "``typ`` is a type of processing; ``'read'`` or ``'write'``."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:100
msgid ""
"All these methods raise this exception if something went wrong with the "
"extension API."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:105
msgid "Emitting events"
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.emit:1
#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.emit_firstresult:1
msgid "Emit *event* and pass *arguments* to the callback functions."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.emit:3
msgid ""
"Return the return values of all callbacks as a list.  Do not emit core "
"Sphinx events in extensions!"
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.emit:8
#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.emit_firstresult:8
msgid "Added *allowed_exceptions* to specify path-through exceptions"
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.Sphinx.emit_firstresult:3
msgid "Return the result of the first callback that doesn't return ``None``."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:116
msgid "Sphinx runtime information"
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:118
msgid ""
"The application object also provides runtime information as attributes."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:122
msgid "Target project.  See :class:`.Project`."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:126
msgid "Source directory."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:130
msgid "Directory containing ``conf.py``."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:134
msgid "Directory for storing pickled doctrees."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:138
msgid "Directory for storing built document."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:144
msgid "Sphinx core events"
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:146
msgid ""
"These events are known to the core.  The arguments shown are given to the "
"registered event handlers.  Use :meth:`.Sphinx.connect` in an extension's "
"``setup`` function (note that ``conf.py`` can also have a ``setup`` "
"function) to connect handlers to the events.  Example:"
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:160
msgid ""
"Below is an overview of each event that happens during a build. In the list "
"below, we include the event name, its callback parameters, and the input and"
" output type for that event::"
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:194
msgid "Here is a more detailed list of these events."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:198
msgid ""
"Emitted when the builder object has been created.  It is available as "
"``app.builder``."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:203
msgid "Emitted when the config object has been initialized."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:209
msgid ""
"Emitted when the environment determines which source files have changed and "
"should be re-read.  *added*, *changed* and *removed* are sets of docnames "
"that the environment has determined.  You can return a list of docnames to "
"re-read in addition to these."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:218
msgid ""
"Emitted when all traces of a source file should be cleaned from the "
"environment, that is, if the source file is removed or before it is freshly "
"read.  This is for extensions that keep their own caches in attributes of "
"the environment."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:223
msgid ""
"For example, there is a cache of all modules on the environment.  When a "
"source file has been changed, the cache's entries for the file are cleared, "
"since the module declarations could have been removed from the file."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:231
msgid ""
"Emitted after the environment has determined the list of all added and "
"changed files and just before it reads them.  It allows extension authors to"
" reorder the list of docnames (*inplace*) before processing, or add more "
"docnames that Sphinx did not consider changed (but never add any docnames "
"that are not in ``env.found_docs``)."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:237
msgid ""
"You can also remove document names; do this with caution since it will make "
"Sphinx treat changed files as unchanged."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:244
msgid ""
"Emitted when a source file has been read.  The *source* argument is a list "
"whose single element is the contents of the source file.  You can process "
"the contents and replace this item to implement source-level "
"transformations."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:248
msgid ""
"For example, if you want to use ``$`` signs to delimit inline math, like in "
"LaTeX, you can use a regular expression to replace ``$...$`` by "
"``:math:`...```."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:256
msgid ""
"Emitted when an object description directive has run.  The *domain* and "
"*objtype* arguments are strings indicating object description of the object."
" And *contentnode* is a content for the object.  It can be modified in-"
"place."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:264
msgid ""
"Emitted when a doctree has been parsed and read by the environment, and is "
"about to be pickled.  The *doctree* can be modified in-place."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:269
msgid ""
"Emitted when a cross-reference to an object cannot be resolved. If the event"
" handler can resolve the reference, it should return a new docutils node to "
"be inserted in the document tree in place of the node *node*.  Usually this "
"node is a :class:`reference` node containing *contnode* as a child. If the "
"handler can not resolve the cross-reference, it can either return ``None`` "
"to let other handlers try, or raise :class:`NoUri` to prevent other handlers"
" in trying and suppress a warning about this cross-reference being "
"unresolved."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:0
msgid "Parameters"
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:279
msgid "The build environment (``app.builder.env``)."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:280
msgid ""
"The :class:`pending_xref` node to be resolved.  Its attributes ``reftype``, "
"``reftarget``, ``modname`` and ``classname`` attributes determine the type "
"and target of the reference."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:283
msgid ""
"The node that carries the text and formatting inside the future reference "
"and should be a child of the returned reference node."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:290
msgid ""
"Emitted when a cross-reference to an object cannot be resolved even after "
":event:`missing-reference`.  If the event handler can emit warnings for the "
"missing reference, it should return ``True``."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:298
msgid ""
"Emitted when a doctree has been \"resolved\" by the environment, that is, "
"all references have been resolved and TOCs have been inserted.  The "
"*doctree* can be modified in place."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:302
msgid ""
"Here is the place to replace custom nodes that don't have visitor methods in"
" the writers, so that they don't cause errors when the writers encounter "
"them."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:307
msgid ""
"This event is only emitted when parallel reading of documents is enabled.  "
"It is emitted once for every subprocess that has read some documents."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:310
msgid ""
"You must handle this event in an extension that stores data in the "
"environment in a custom location.  Otherwise the environment in the main "
"process will not be aware of the information stored in the subprocess."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:314
msgid ""
"*other* is the environment object from the subprocess, *env* is the "
"environment from the main process.  *docnames* is a set of document names "
"that have been read in the subprocess."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:322
msgid ""
"Emitted when the :meth:`update` method of the build environment has "
"completed, that is, the environment and all doctrees are now up-to-date."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:325
msgid ""
"You can return an iterable of docnames from the handler.  These documents "
"will then be considered updated, and will be (re-)written during the writing"
" phase."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:331
msgid "The handlers' return value is now used."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:336
msgid ""
"Emitted when Consistency checks phase.  You can check consistency of "
"metadata for whole of documents."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:341
msgid "As a **experimental** event"
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:345
msgid ""
"Emitted when the HTML builder is starting to write non-document pages.  You "
"can add pages to write by returning an iterable from this event consisting "
"of ``(pagename, context, templatename)``."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:353
msgid ""
"Emitted when the HTML builder has created a context dictionary to render a "
"template with -- this can be used to add custom elements to the context."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:356
msgid ""
"The *pagename* argument is the canonical name of the page being rendered, "
"that is, without ``.html`` suffix and using slashes as path separators.  The"
" *templatename* is the name of the template to render, this will be "
"``'page.html'`` for all pages from reST documents."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:361
msgid ""
"The *context* argument is a dictionary of values that are given to the "
"template engine to render the page and can be modified to include custom "
"values.  Keys must be strings."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:365
msgid ""
"The *doctree* argument will be a doctree when the page is created from a "
"reST documents; it will be ``None`` when the page is created from an HTML "
"template alone."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:369
msgid ""
"You can return a string from the handler, it will then replace "
"``'page.html'`` as the HTML template for this page."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:374
msgid "The return value can now specify a template name."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:379
msgid ""
"Emitted when a build has finished, before Sphinx exits, usually used for "
"cleanup.  This event is emitted even when the build process raised an "
"exception, given as the *exception* argument.  The exception is reraised in "
"the application after the event handlers have run.  If the build process "
"raised no exception, *exception* will be ``None``.  This allows to customize"
" cleanup actions depending on the exception status."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:390
msgid "Checking the Sphinx version"
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:394
msgid "Use this to adapt your extension to API changes in Sphinx."
msgstr ""

#: ../../sphinx/sphinx/__init__.pydocstring of sphinx.version_info:1
msgid "Version info for better programmatic use."
msgstr ""

#: ../../sphinx/sphinx/__init__.pydocstring of sphinx.version_info:3
msgid ""
"A tuple of five elements; for Sphinx version 1.2.1 beta 3 this would be "
"``(1, 2, 1, 'beta', 3)``. The fourth element can be one of: ``alpha``, "
"``beta``, ``rc``, ``final``. ``final`` always has 0 as the last element."
msgstr ""

#: ../../sphinx/sphinx/__init__.pydocstring of sphinx.version_info:7
msgid "Before version 1.2, check the string ``sphinx.__version__``."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:400
msgid "The Config object"
msgstr ""

#: ../../sphinx/sphinx/config.pydocstring of sphinx.config.Config:1
msgid "Configuration file abstraction."
msgstr ""

#: ../../sphinx/sphinx/config.pydocstring of sphinx.config.Config:3
msgid ""
"The config object makes the values of all config values available as "
"attributes."
msgstr ""

#: ../../sphinx/sphinx/config.pydocstring of sphinx.config.Config:6
msgid ""
"It is exposed via the :py:attr:`sphinx.application.Application.config` and "
":py:attr:`sphinx.environment.Environment.config` attributes. For example, to"
" get the value of :confval:`language`, use either ``app.config.language`` or"
" ``env.config.language``."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:410
msgid "The template bridge"
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.TemplateBridge:1
msgid ""
"This class defines the interface for a \"template bridge\", that is, a class"
" that renders templates given a template name and a context."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.TemplateBridge.init:1
msgid "Called by the builder to initialize the template system."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.TemplateBridge.init:3
msgid ""
"*builder* is the builder object; you'll probably want to look at the value "
"of ``builder.config.templates_path``."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.TemplateBridge.init:6
msgid ""
"*theme* is a :class:`sphinx.theming.Theme` object or None; in the latter "
"case, *dirs* can be list of fixed directories to look for templates."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.TemplateBridge.newest_template_mtime:1
msgid ""
"Called by the builder to determine if output files are outdated because of "
"template changes.  Return the mtime of the newest template file that was "
"changed.  The default implementation returns ``0``."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.TemplateBridge.render:1
msgid ""
"Called by the builder to render a template given as a filename with a "
"specified context (a Python dictionary)."
msgstr ""

#: ../../sphinx/sphinx/application.pydocstring of
#: sphinx.application.TemplateBridge.render_string:1
msgid ""
"Called by the builder to render a template given as a string with a "
"specified context (a Python dictionary)."
msgstr ""

#: ../../sphinx/doc/extdev/appapi.rst:421
msgid "Exceptions"
msgstr ""

#: ../../sphinx/sphinx/errors.pydocstring of sphinx.errors.SphinxError:1
msgid "Base class for Sphinx errors."
msgstr ""

#: ../../sphinx/sphinx/errors.pydocstring of sphinx.errors.SphinxError:3
msgid ""
"This is the base class for \"nice\" exceptions.  When such an exception is "
"raised, Sphinx will abort the build and present the exception category and "
"message to the user."
msgstr ""

#: ../../sphinx/sphinx/errors.pydocstring of sphinx.errors.SphinxError:7
msgid ""
"Extensions are encouraged to derive from this exception for their custom "
"errors."
msgstr ""

#: ../../sphinx/sphinx/errors.pydocstring of sphinx.errors.SphinxError:10
msgid ""
"Exceptions *not* derived from :exc:`SphinxError` are treated as unexpected "
"and shown to the user with a part of the traceback (and the full traceback "
"saved in a temporary file)."
msgstr ""

#: ../../sphinx/sphinx/errors.pydocstring of sphinx.errors.SphinxError:16
msgid ""
"Description of the exception \"category\", used in converting the exception "
"to a string (\"category: message\").  Should be set accordingly in "
"subclasses."
msgstr ""

#: ../../sphinx/sphinx/errors.pydocstring of sphinx.errors.ConfigError:1
msgid "Configuration error."
msgstr ""

#: ../../sphinx/sphinx/errors.pydocstring of sphinx.errors.ExtensionError:1
msgid "Extension error."
msgstr ""

#: ../../sphinx/sphinx/errors.pydocstring of sphinx.errors.ThemeError:1
msgid "Theme error."
msgstr ""

#: ../../sphinx/sphinx/errors.pydocstring of
#: sphinx.errors.VersionRequirementError:1
msgid "Incompatible Sphinx version error."
msgstr ""
