# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2020, Georg Brandl and the Sphinx team
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 4.0.0+/d9280e253\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-13 23:32+0000\n"
"PO-Revision-Date: 2018-02-12 13:48+0000\n"
"Language-Team: Arabic (https://www.transifex.com/sphinx-doc/teams/15434/ar/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ar\n"
"Plural-Forms: nplurals=6; plural=n==0 ? 0 : n==1 ? 1 : n==2 ? 2 : n%100>=3 && n%100<=10 ? 3 : n%100>=11 && n%100<=99 ? 4 : 5;\n"

#: ../../sphinx/doc/extdev/domainapi.rst:4
msgid "Domain API"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of sphinx.domains.Domain:1
msgid ""
"A Domain is meant to be a group of \"object\" description directives for "
"objects of a similar nature, and corresponding roles to create references to"
" them.  Examples would be Python modules, classes, functions etc., elements "
"of a templating language, Sphinx roles and directives, etc."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of sphinx.domains.Domain:6
msgid ""
"Each domain has a separate storage for information about existing objects "
"and how to reference them in `self.data`, which must be a dictionary.  It "
"also must implement several functions that expose the object information in "
"a uniform way to parts of Sphinx that allow the user to reference or search "
"for objects in a domain-agnostic way."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain:12
msgid ""
"About `self.data`: since all object and cross-referencing information is "
"stored on a BuildEnvironment instance, the `domain.data` object is also "
"stored in the `env.domaindata` dict under the key `domain.name`.  Before the"
" build process starts, every active domain is instantiated and given the "
"environment object; the `domaindata` dict must then either be nonexistent or"
" a dictionary whose 'version' key is equal to the domain class' "
":attr:`data_version` attribute.  Otherwise, `OSError` is raised and the "
"pickled environment is discarded."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.add_object_type:1
msgid "Add an object type."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.check_consistency:1
msgid "Do consistency checks (**experimental**)."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.clear_doc:1
msgid "Remove traces of a document in the domain-specific inventories."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.directive:1
msgid ""
"Return a directive adapter class that always gives the registered directive "
"its full name ('domain:name') as ``self.name``."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.get_enumerable_node_type:1
msgid "Get type of enumerable nodes (experimental)."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.get_full_qualified_name:1
msgid "Return full qualified name for given node."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.get_objects:1
msgid "Return an iterable of \"object descriptions\"."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.get_objects:3
msgid "Object descriptions are tuples with six items:"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.get_objects:6
#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Index.generate:20
msgid "``name``"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.get_objects:6
msgid "Fully qualified name."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.get_objects:9
msgid "``dispname``"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.get_objects:9
msgid "Name to display when searching/linking."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.get_objects:12
msgid "``type``"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.get_objects:12
msgid "Object type, a key in ``self.object_types``."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.get_objects:15
#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Index.generate:33
msgid "``docname``"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.get_objects:15
msgid "The document where it is to be found."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.get_objects:18
#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Index.generate:36
msgid "``anchor``"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.get_objects:18
msgid "The anchor name for the object."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.get_objects:30
msgid "``priority``"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.get_objects:21
msgid ""
"How \"important\" the object is (determines placement in search results). "
"One of:"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.get_objects:24
#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Index.generate:27
msgid "``1``"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.get_objects:25
msgid "Default priority (placed before full-text matches)."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.get_objects:26
#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Index.generate:25
msgid "``0``"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.get_objects:27
msgid "Object is important (placed before default-priority objects)."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.get_objects:28
#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Index.generate:30
msgid "``2``"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.get_objects:29
msgid "Object is unimportant (placed after full-text matches)."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.get_objects:30
msgid "``-1``"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.get_objects:31
msgid "Object should not show up in search at all."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.get_type_name:1
msgid "Return full name for given ObjType."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.merge_domaindata:1
msgid ""
"Merge in data regarding *docnames* from a different domaindata inventory "
"(coming from a subprocess in parallel builds)."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.process_doc:1
msgid "Process a document after it is read by the environment."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.process_field_xref:1
msgid ""
"Process a pending xref created in a doc field. For example, attach "
"information about the current scope."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.resolve_any_xref:1
msgid "Resolve the pending_xref *node* with the given *target*."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.resolve_any_xref:3
msgid ""
"The reference comes from an \"any\" or similar role, which means that we "
"don't know the type.  Otherwise, the arguments are the same as for "
":meth:`resolve_xref`."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.resolve_any_xref:7
msgid ""
"The method must return a list (potentially empty) of tuples "
"``('domain:role', newnode)``, where ``'domain:role'`` is the name of a role "
"that could have created the same reference, e.g. ``'py:func'``. ``newnode`` "
"is what :meth:`resolve_xref` would return."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.resolve_xref:1
msgid "Resolve the pending_xref *node* with the given *typ* and *target*."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.resolve_xref:3
msgid ""
"This method should return a new node, to replace the xref node, containing "
"the *contnode* which is the markup content of the cross-reference."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.resolve_xref:7
msgid ""
"If no resolution can be found, None can be returned; the xref node will then"
" given to the :event:`missing-reference` event, and if that yields no "
"resolution, replaced by *contnode*."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.resolve_xref:11
msgid ""
"The method can also raise :exc:`sphinx.environment.NoUri` to suppress the "
":event:`missing-reference` event being emitted."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.role:1
msgid ""
"Return a role adapter function that always gives the registered role its "
"full name ('domain:name') as the first argument."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.setup:1
msgid "Set up domain object."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.dangling_warnings:1
msgid "role name -> a warning message if reference is missing"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.data:1
msgid "data value"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.data_version:1
msgid "data version, bump this when the format of `self.data` changes"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.directives:1
msgid "directive name -> directive class"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.enumerable_nodes:1
msgid "node_class -> (enum_node_type, title_getter)"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.indices:1
msgid "a list of Index subclasses"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.initial_data:1
msgid "data value for a fresh environment"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.label:1
msgid "domain label: longer, more descriptive (used in messages)"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.name:1
msgid "domain name: should be short, but unique"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.object_types:1
msgid "type (usually directive) name -> ObjType instance"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Domain.roles:1
msgid "role name -> role callable"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.ObjType:1
msgid ""
"An ObjType is the description for a type of object that a domain can "
"document.  In the object_types attribute of Domain subclasses, object type "
"names are mapped to instances of this class."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.ObjType:5
msgid "Constructor arguments:"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.ObjType:7
msgid "*lname*: localized name of the type (do not include domain name)"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.ObjType:8
msgid "*roles*: all the roles that can refer to an object of this type"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.ObjType:9
msgid ""
"*attrs*: object attributes -- currently only \"searchprio\" is known, which "
"defines the object's priority in the full-text search index, see "
":meth:`Domain.get_objects()`."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of sphinx.domains.Index:1
msgid ""
"An Index is the description for a domain-specific index.  To add an index to"
" a domain, subclass Index, overriding the three name attributes:"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of sphinx.domains.Index:4
msgid ""
"`name` is an identifier used for generating file names. It is also used for "
"a hyperlink target for the index. Therefore, users can refer the index page "
"using ``ref`` role and a string which is combined domain name and ``name`` "
"attribute (ex. ``:ref:`py-modindex```)."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of sphinx.domains.Index:8
msgid "`localname` is the section title for the index."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of sphinx.domains.Index:9
msgid ""
"`shortname` is a short name for the index, for use in the relation bar in "
"HTML output.  Can be empty to disable entries in the relation bar."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of sphinx.domains.Index:12
msgid ""
"and providing a :meth:`generate()` method.  Then, add the index class to "
"your domain's `indices` list.  Extensions can add indices to existing "
"domains using :meth:`~sphinx.application.Sphinx.add_index_to_domain()`."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of sphinx.domains.Index:18
msgid ""
"Index pages can be referred by domain name and index name via "
":rst:role:`ref` role."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Index.generate:1
msgid "Get entries for the index."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Index.generate:3
msgid ""
"If ``docnames`` is given, restrict to entries referring to these docnames."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Index.generate:6
msgid "The return value is a tuple of ``(content, collapse)``:"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Index.generate:10
msgid "``collapse``"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Index.generate:9
msgid ""
"A boolean that determines if sub-entries should start collapsed (for output "
"formats that support collapsing sub-entries)."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Index.generate:45
msgid "``content``:"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Index.generate:13
msgid ""
"A sequence of ``(letter, entries)`` tuples, where ``letter`` is the "
"\"heading\" for the given ``entries``, usually the starting letter, and "
"``entries`` is a sequence of single entries. Each entry is a sequence "
"``[name, subtype, docname, anchor, extra, qualifier, descr]``. The items in "
"this sequence have the following meaning:"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Index.generate:20
msgid "The name of the index entry to be displayed."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Index.generate:30
msgid "``subtype``"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Index.generate:23
msgid "The sub-entry related type. One of:"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Index.generate:26
msgid "A normal entry."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Index.generate:28
msgid "An entry with sub-entries."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Index.generate:30
msgid "A sub-entry."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Index.generate:33
msgid "*docname* where the entry is located."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Index.generate:36
msgid "Anchor for the entry within ``docname``"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Index.generate:39
msgid "``extra``"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Index.generate:39
msgid "Extra info for the entry."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Index.generate:42
msgid "``qualifier``"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Index.generate:42
msgid "Qualifier for the description."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Index.generate:45
msgid "``descr``"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Index.generate:45
msgid "Description for the entry."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.pydocstring of
#: sphinx.domains.Index.generate:47
msgid ""
"Qualifier and description are not rendered for some output formats such as "
"LaTeX."
msgstr ""
