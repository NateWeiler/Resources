# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2020, Georg Brandl and the Sphinx team
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Vladimir Milovanović <vmilovanovic@gmail.com>, 2020
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 4.0.0+/d9280e253\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-13 23:32+0000\n"
"PO-Revision-Date: 2018-04-08 15:19+0000\n"
"Last-Translator: Vladimir Milovanović <vmilovanovic@gmail.com>, 2020\n"
"Language-Team: Serbian (https://www.transifex.com/sphinx-doc/teams/15434/sr/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sr\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

#: ../../sphinx/doc/extdev/utils.rst:2
msgid "Utilities"
msgstr ""

#: ../../sphinx/doc/extdev/utils.rst:4
msgid "Sphinx provides utility classes and functions to develop extensions."
msgstr ""

#: ../../sphinx/doc/extdev/utils.rst:7
msgid "Base classes for components"
msgstr ""

#: ../../sphinx/doc/extdev/utils.rst:9
msgid ""
"These base classes are useful to allow your extensions to obtain Sphinx "
"components (e.g. :class:`.Config`, :class:`.BuildEnvironment` and so on) "
"easily."
msgstr ""

#: ../../sphinx/doc/extdev/utils.rst:12
msgid ""
"The subclasses of them might not work with bare docutils because they are "
"strongly coupled with Sphinx."
msgstr ""

#: ../../sphinx/sphinx/transforms/__init__.pydocstring of
#: sphinx.transforms.SphinxTransform:1
msgid "A base class of Transforms."
msgstr ""

#: ../../sphinx/sphinx/transforms/__init__.pydocstring of
#: sphinx.transforms.SphinxTransform:3
msgid ""
"Compared with ``docutils.transforms.Transform``, this class improves "
"accessibility to Sphinx APIs."
msgstr ""

#: ../../sphinx/sphinx/transforms/__init__.pydocstring of
#: sphinx.transforms.SphinxTransform.app:1
msgid "Reference to the :class:`.Sphinx` object."
msgstr ""

#: ../../sphinx/sphinx/transforms/__init__.pydocstring of
#: sphinx.transforms.SphinxTransform.config:1
#: ../../sphinx/sphinx/util/docutils.pydocstring of
#: sphinx.util.docutils.SphinxDirective.config:1
#: ../../sphinx/sphinx/util/docutils.pydocstring of
#: sphinx.util.docutils.SphinxRole.config:1
msgid "Reference to the :class:`.Config` object."
msgstr ""

#: ../../sphinx/sphinx/transforms/__init__.pydocstring of
#: sphinx.transforms.SphinxTransform.env:1
#: ../../sphinx/sphinx/util/docutils.pydocstring of
#: sphinx.util.docutils.SphinxDirective.env:1
#: ../../sphinx/sphinx/util/docutils.pydocstring of
#: sphinx.util.docutils.SphinxRole.env:1
msgid "Reference to the :class:`.BuildEnvironment` object."
msgstr ""

#: ../../sphinx/sphinx/transforms/post_transforms/__init__.pydocstring of
#: sphinx.transforms.post_transforms.SphinxPostTransform:1
msgid "A base class of post-transforms."
msgstr ""

#: ../../sphinx/sphinx/transforms/post_transforms/__init__.pydocstring of
#: sphinx.transforms.post_transforms.SphinxPostTransform:3
msgid ""
"Post transforms are invoked to modify the document to restructure it for "
"outputting. They do resolving references, convert images, special "
"transformation for each output formats and so on.  This class helps to "
"implement these post transforms."
msgstr ""

#: ../../sphinx/sphinx/transforms/post_transforms/__init__.pydocstring of
#: sphinx.transforms.post_transforms.SphinxPostTransform.apply:1
msgid "Override to apply the transform to the document tree."
msgstr ""

#: ../../sphinx/sphinx/transforms/post_transforms/__init__.pydocstring of
#: sphinx.transforms.post_transforms.SphinxPostTransform.is_supported:1
msgid "Check this transform working for current builder."
msgstr ""

#: ../../sphinx/sphinx/transforms/post_transforms/__init__.pydocstring of
#: sphinx.transforms.post_transforms.SphinxPostTransform.run:1
msgid "main method of post transforms."
msgstr ""

#: ../../sphinx/sphinx/transforms/post_transforms/__init__.pydocstring of
#: sphinx.transforms.post_transforms.SphinxPostTransform.run:3
msgid "Subclasses should override this method instead of ``apply()``."
msgstr ""

#: ../../sphinx/sphinx/util/docutils.pydocstring of
#: sphinx.util.docutils.SphinxDirective:1
msgid "A base class for Sphinx directives."
msgstr ""

#: ../../sphinx/sphinx/util/docutils.pydocstring of
#: sphinx.util.docutils.SphinxDirective:3
msgid "This class provides helper methods for Sphinx directives."
msgstr ""

#: ../../sphinx/sphinx/util/docutils.pydocstring of
#: sphinx.util.docutils.SphinxDirective:5
#: ../../sphinx/sphinx/util/docutils.pydocstring of
#: sphinx.util.docutils.SphinxRole:5
msgid ""
"The subclasses of this class might not work with docutils. This class is "
"strongly coupled with Sphinx."
msgstr ""

#: ../../sphinx/sphinx/util/docutils.pydocstring of
#: sphinx.util.docutils.SphinxDirective.get_source_info:1
msgid "Get source and line number."
msgstr ""

#: ../../sphinx/sphinx/util/docutils.pydocstring of
#: sphinx.util.docutils.SphinxDirective.set_source_info:1
msgid "Set source and line number to the node."
msgstr ""

#: ../../sphinx/sphinx/util/docutils.pydocstring of
#: sphinx.util.docutils.SphinxRole:1
msgid "A base class for Sphinx roles."
msgstr ""

#: ../../sphinx/sphinx/util/docutils.pydocstring of
#: sphinx.util.docutils.SphinxRole:3
msgid "This class provides helper methods for Sphinx roles."
msgstr ""

#: ../../sphinx/sphinx/util/docutils.pydocstring of
#: sphinx.util.docutils.SphinxRole.content:1
msgid "A list of strings, the directive content for customization"
msgstr ""

#: ../../sphinx/sphinx/util/docutils.pydocstring of
#: sphinx.util.docutils.SphinxRole.inliner:1
msgid "The ``docutils.parsers.rst.states.Inliner`` object."
msgstr ""

#: ../../sphinx/sphinx/util/docutils.pydocstring of
#: sphinx.util.docutils.SphinxRole.lineno:1
msgid "The line number where the interpreted text begins."
msgstr ""

#: ../../sphinx/sphinx/util/docutils.pydocstring of
#: sphinx.util.docutils.SphinxRole.name:1
msgid "The role name actually used in the document."
msgstr ""

#: ../../sphinx/sphinx/util/docutils.pydocstring of
#: sphinx.util.docutils.SphinxRole.options:1
msgid "A dictionary of directive options for customization"
msgstr ""

#: ../../sphinx/sphinx/util/docutils.pydocstring of
#: sphinx.util.docutils.SphinxRole.rawtext:1
msgid "A string containing the entire interpreted text input."
msgstr ""

#: ../../sphinx/sphinx/util/docutils.pydocstring of
#: sphinx.util.docutils.SphinxRole.text:1
msgid "The interpreted text content."
msgstr ""

#: ../../sphinx/sphinx/util/docutils.pydocstring of
#: sphinx.util.docutils.ReferenceRole:1
msgid "A base class for reference roles."
msgstr ""

#: ../../sphinx/sphinx/util/docutils.pydocstring of
#: sphinx.util.docutils.ReferenceRole:3
msgid ""
"The reference roles can accpet ``link title <target>`` style as a text for "
"the role.  The parsed result; link title and target will be stored to "
"``self.title`` and ``self.target``."
msgstr ""

#: ../../sphinx/sphinx/util/docutils.pydocstring of
#: sphinx.util.docutils.ReferenceRole.disabled:1
msgid "A boolean indicates the reference is disabled."
msgstr ""

#: ../../sphinx/sphinx/util/docutils.pydocstring of
#: sphinx.util.docutils.ReferenceRole.has_explicit_title:1
msgid "A boolean indicates the role has explicit title or not."
msgstr ""

#: ../../sphinx/sphinx/util/docutils.pydocstring of
#: sphinx.util.docutils.ReferenceRole.target:1
msgid "The link target for the interpreted text."
msgstr ""

#: ../../sphinx/sphinx/util/docutils.pydocstring of
#: sphinx.util.docutils.ReferenceRole.title:1
msgid "The link title for the interpreted text."
msgstr ""

#: ../../sphinx/sphinx/transforms/post_transforms/images.pydocstring of
#: sphinx.transforms.post_transforms.images.ImageConverter:1
msgid "A base class for image converters."
msgstr ""

#: ../../sphinx/sphinx/transforms/post_transforms/images.pydocstring of
#: sphinx.transforms.post_transforms.images.ImageConverter:3
msgid ""
"An image converter is kind of Docutils transform module.  It is used to "
"convert image files which does not supported by builder to appropriate "
"format for that builder."
msgstr ""

#: ../../sphinx/sphinx/transforms/post_transforms/images.pydocstring of
#: sphinx.transforms.post_transforms.images.ImageConverter:7
msgid ""
"For example, :py:class:`LaTeX builder <.LaTeXBuilder>` supports PDF, PNG and"
" JPEG as image formats.  However it does not support SVG images. For such "
"case, to use image converters allows to embed these unsupported images into "
"the document.  One of image converters; :ref:`sphinx.ext.imgconverter "
"<sphinx.ext.imgconverter>` can convert a SVG image to PNG format using "
"Imagemagick internally."
msgstr ""

#: ../../sphinx/sphinx/transforms/post_transforms/images.pydocstring of
#: sphinx.transforms.post_transforms.images.ImageConverter:14
msgid "There are three steps to make your custom image converter:"
msgstr ""

#: ../../sphinx/sphinx/transforms/post_transforms/images.pydocstring of
#: sphinx.transforms.post_transforms.images.ImageConverter:16
msgid "Make a subclass of ``ImageConverter`` class"
msgstr ""

#: ../../sphinx/sphinx/transforms/post_transforms/images.pydocstring of
#: sphinx.transforms.post_transforms.images.ImageConverter:17
msgid "Override ``conversion_rules``, ``is_available()`` and ``convert()``"
msgstr ""

#: ../../sphinx/sphinx/transforms/post_transforms/images.pydocstring of
#: sphinx.transforms.post_transforms.images.ImageConverter:18
msgid ""
"Register your image converter to Sphinx using "
":py:meth:`.Sphinx.add_post_transform`"
msgstr ""

#: ../../sphinx/sphinx/transforms/post_transforms/images.pydocstring of
#: sphinx.transforms.post_transforms.images.ImageConverter.convert:1
msgid "Convert a image file to expected format."
msgstr ""

#: ../../sphinx/sphinx/transforms/post_transforms/images.pydocstring of
#: sphinx.transforms.post_transforms.images.ImageConverter.convert:3
msgid ""
"*_from* is a path for source image file, and *_to* is a path for destination"
" file."
msgstr ""

#: ../../sphinx/sphinx/transforms/post_transforms/images.pydocstring of
#: sphinx.transforms.post_transforms.images.ImageConverter.is_available:1
msgid "Return the image converter is available or not."
msgstr ""

#: ../../sphinx/sphinx/transforms/post_transforms/images.pydocstring of
#: sphinx.transforms.post_transforms.images.ImageConverter.available:1
msgid ""
"The converter is available or not.  Will be filled at the first call of the "
"build.  The result is shared in the same process."
msgstr ""

#: ../../sphinx/sphinx/transforms/post_transforms/images.pydocstring of
#: sphinx.transforms.post_transforms.images.ImageConverter.available:4
msgid "Todo"
msgstr "План"

#: ../../sphinx/sphinx/transforms/post_transforms/images.pydocstring of
#: sphinx.transforms.post_transforms.images.ImageConverter.available:4
msgid ""
"This should be refactored not to store the state without class variable."
msgstr ""

#: ../../sphinx/sphinx/transforms/post_transforms/images.pydocstring of
#: sphinx.transforms.post_transforms.images.ImageConverter.conversion_rules:1
msgid ""
"A conversion rules the image converter supports. It is represented as a list"
" of pair of source image format (mimetype) and destination one::"
msgstr ""

#: ../../sphinx/doc/extdev/utils.rst:34
msgid "Utility components"
msgstr ""

#: ../../sphinx/sphinx/events.pydocstring of sphinx.events.EventManager:1
msgid "Event manager for Sphinx."
msgstr ""

#: ../../sphinx/sphinx/events.pydocstring of sphinx.events.EventManager.add:1
msgid "Register a custom Sphinx event."
msgstr ""

#: ../../sphinx/sphinx/events.pydocstring of
#: sphinx.events.EventManager.connect:1
msgid "Connect a handler to specific event."
msgstr ""

#: ../../sphinx/sphinx/events.pydocstring of
#: sphinx.events.EventManager.disconnect:1
msgid "Disconnect a handler."
msgstr ""

#: ../../sphinx/sphinx/events.pydocstring of sphinx.events.EventManager.emit:1
msgid "Emit a Sphinx event."
msgstr ""

#: ../../sphinx/sphinx/events.pydocstring of
#: sphinx.events.EventManager.emit_firstresult:1
msgid "Emit a Sphinx event and returns first result."
msgstr ""

#: ../../sphinx/sphinx/events.pydocstring of
#: sphinx.events.EventManager.emit_firstresult:3
msgid ""
"This returns the result of the first handler that doesn't return ``None``."
msgstr ""
