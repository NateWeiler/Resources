# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, Georg Brandl and the Sphinx team
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# wendi cao <651645601@qq.com>, 2020
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 2.0.0+/25fed568\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-12-22 17:26+0000\n"
"PO-Revision-Date: 2018-02-12 13:48+0000\n"
"Last-Translator: wendi cao <651645601@qq.com>, 2020\n"
"Language-Team: Chinese (China) (https://www.transifex.com/sphinx-doc/teams/15434/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../sphinx/doc/extdev/tutorial.rst:4
msgid "Tutorial: Writing a simple extension"
msgstr "教程：编写一个简单的扩展"

#: ../../sphinx/doc/extdev/tutorial.rst:6
msgid ""
"This section is intended as a walkthrough for the creation of custom "
"extensions. It covers the basics of writing and activating an extension, as "
"well as commonly used features of extensions."
msgstr "本节将作为创建自定义扩展的演练。它涵盖了编写和激活扩展的基础知识，以及扩展的常用特性。"

#: ../../sphinx/doc/extdev/tutorial.rst:10
msgid ""
"As an example, we will cover a \"todo\" extension that adds capabilities to "
"include todo entries in the documentation, and to collect these in a central"
" place.  (A similar \"todo\" extension is distributed with Sphinx.)"
msgstr ""
"作为一个例子，我们将介绍一个“todo”扩展，它增加了在文档中包含todo条目并在中心位置收集这些条目的功能。（类似的“todo”扩展与Sphinx一起分发。）"

#: ../../sphinx/doc/extdev/tutorial.rst:16
msgid "Important objects"
msgstr "重要对象"

#: ../../sphinx/doc/extdev/tutorial.rst:18
msgid ""
"There are several key objects whose API you will use while writing an "
"extension.  These are:"
msgstr "有几个关键对象的接口将在编写扩展时使用。这些是："

#: ../../sphinx/doc/extdev/tutorial.rst:27
msgid "**Application**"
msgstr "**应用*"

#: ../../sphinx/doc/extdev/tutorial.rst:22
msgid ""
"The application object (usually called ``app``) is an instance of "
":class:`.Sphinx`.  It controls most high-level functionality, such as the "
"setup of extensions, event dispatching and producing output (logging)."
msgstr "应用程序对象（通常称为“app”）是类：`.Sphinx`的实例。它控制大多数高级功能，如扩展的设置、事件调度和生成输出（日志记录）。"

#: ../../sphinx/doc/extdev/tutorial.rst:26
msgid ""
"If you have the environment object, the application is available as "
"``env.app``."
msgstr "如果有环境对象，则应用程序可用作``环境应用程序``."

#: ../../sphinx/doc/extdev/tutorial.rst:40
msgid "**Environment**"
msgstr "**环境**"

#: ../../sphinx/doc/extdev/tutorial.rst:30
msgid ""
"The build environment object (usually called ``env``) is an instance of "
":class:`.BuildEnvironment`.  It is responsible for parsing the source "
"documents, stores all metadata about the document collection and is "
"serialized to disk after each build."
msgstr ""
"生成环境对象（通常称为“env”）是类：`.BuildEnvironment`的实例。它负责解析源文档，存储文档集合的所有元数据，并在每次构建后序列化到磁盘。"

#: ../../sphinx/doc/extdev/tutorial.rst:35
msgid ""
"Its API provides methods to do with access to metadata, resolving "
"references, etc.  It can also be used by extensions to cache information "
"that should persist for incremental rebuilds."
msgstr "它的接口提供了访问元数据、解析引用等的方法。扩展也可以使用它来缓存应该为增量重建保留的信息。"

#: ../../sphinx/doc/extdev/tutorial.rst:39
msgid ""
"If you have the application or builder object, the environment is available "
"as ``app.env`` or ``builder.env``."
msgstr "如果有application或builder对象，则环境可用作``应用程序环境``或者``生成器.env``."

#: ../../sphinx/doc/extdev/tutorial.rst:49
msgid "**Builder**"
msgstr "**生成器**"

#: ../../sphinx/doc/extdev/tutorial.rst:43
msgid ""
"The builder object (usually called ``builder``) is an instance of a specific"
" subclass of :class:`.Builder`.  Each builder class knows how to convert the"
" parsed documents into an output format, or otherwise process them (e.g. "
"check external links)."
msgstr ""
"builder对象（通常称为“builder”）是一个特定子类的实例：class:`.builder`。每个builder类都知道如何将已解析的文档转换为输出格式，或者以其他方式处理它们（例如，检查外部链接）。"

#: ../../sphinx/doc/extdev/tutorial.rst:48
msgid ""
"If you have the application object, the builder is available as "
"``app.builder``."
msgstr "如果您有应用程序对象，则构建器可用作``应用程序生成器``."

#: ../../sphinx/doc/extdev/tutorial.rst:57
msgid "**Config**"
msgstr "**配置**"

#: ../../sphinx/doc/extdev/tutorial.rst:52
msgid ""
"The config object (usually called ``config``) provides the values of "
"configuration values set in :file:`conf.py` as attributes.  It is an "
"instance of :class:`.Config`."
msgstr ""
"config对象（通常称为“config”）提供在以下文件中设置的配置值的值：`配置文件`作为属性。它是一个实例：class:`.Config`。"

#: ../../sphinx/doc/extdev/tutorial.rst:56
msgid "The config is available as ``app.config`` or ``env.config``."
msgstr "配置可用作``应用程序配置``或者``环境配置``."

#: ../../sphinx/doc/extdev/tutorial.rst:60
msgid "Build Phases"
msgstr "构建阶段"

#: ../../sphinx/doc/extdev/tutorial.rst:62
msgid ""
"One thing that is vital in order to understand extension mechanisms is the "
"way in which a Sphinx project is built: this works in several phases."
msgstr "为了理解插件机制，一件至关重要的事情是Sphinx项目的构建方式：它分几个阶段工作。"

#: ../../sphinx/doc/extdev/tutorial.rst:65
msgid "**Phase 0: Initialization**"
msgstr "**阶段0：初始化**"

#: ../../sphinx/doc/extdev/tutorial.rst:67
msgid ""
"In this phase, almost nothing of interest to us happens.  The source "
"directory is searched for source files, and extensions are initialized. "
"Should a stored build environment exist, it is loaded, otherwise a new one "
"is created."
msgstr "在这个阶段，几乎没有感兴趣的事情发生。在源目录中搜索源文件，并初始化插件名。如果存在存储的生成环境，则加载该环境，否则将创建一个新环境。"

#: ../../sphinx/doc/extdev/tutorial.rst:72
msgid "**Phase 1: Reading**"
msgstr "**阶段1：阅读**"

#: ../../sphinx/doc/extdev/tutorial.rst:74
msgid ""
"In Phase 1, all source files (and on subsequent builds, those that are new "
"or changed) are read and parsed.  This is the phase where directives and "
"roles are encountered by docutils, and the corresponding code is executed.  "
"The output of this phase is a *doctree* for each source file; that is a tree"
" of docutils nodes.  For document elements that aren't fully known until all"
" existing files are read, temporary nodes are created."
msgstr ""
"在阶段1中，所有源文件（以及后续构建中的新的或更改的）都将被读取和解析。这是docutils遇到指令和角色并执行相应代码的阶段。这个阶段的输出是每个源文件的*doctree*；这是docutils节点的树。对于在读取所有现有文件之前不完全知道的文档元素，将创建临时节点。"

#: ../../sphinx/doc/extdev/tutorial.rst:81
msgid ""
"There are nodes provided by docutils, which are documented `in the docutils "
"documentation <http://docutils.sourceforge.net/docs/ref/doctree.html>`__. "
"Additional nodes are provided by Sphinx and :ref:`documented here <nodes>`."
msgstr ""
"docutils提供了一些节点，这些节点记录在docutils文档中<http://docutils.sourceforge.net/docs/ref/doctree.html>`__."
" 其他节点由Sphinx和：ref:`documented here`提供。"

#: ../../sphinx/doc/extdev/tutorial.rst:85
msgid ""
"During reading, the build environment is updated with all meta- and cross "
"reference data of the read documents, such as labels, the names of headings,"
" described Python objects and index entries.  This will later be used to "
"replace the temporary nodes."
msgstr ""
"在读取过程中，构建环境将使用读取文档的所有元数据和交叉引用数据进行更新，例如标签、标题名称、所描述的Python对象和索引项。这将稍后用于替换临时节点。"

#: ../../sphinx/doc/extdev/tutorial.rst:90
msgid ""
"The parsed doctrees are stored on the disk, because it is not possible to "
"hold all of them in memory."
msgstr "解析后的doctree存储在磁盘上，因为不可能将它们全部保存在内存中。"

#: ../../sphinx/doc/extdev/tutorial.rst:93
msgid "**Phase 2: Consistency checks**"
msgstr "**阶段2: 连贯性检查**"

#: ../../sphinx/doc/extdev/tutorial.rst:95
msgid "Some checking is done to ensure no surprises in the built documents."
msgstr "进行一些检查以确保生成的文档中没有意外情况。"

#: ../../sphinx/doc/extdev/tutorial.rst:97
msgid "**Phase 3: Resolving**"
msgstr "**阶段3：解析**"

#: ../../sphinx/doc/extdev/tutorial.rst:99
msgid ""
"Now that the metadata and cross-reference data of all existing documents is "
"known, all temporary nodes are replaced by nodes that can be converted into "
"output using components called tranform.  For example, links are created for"
" object references that exist, and simple literal nodes are created for "
"those that don't."
msgstr ""
"现在，所有现有文档的元数据和交叉引用数据都是已知的，所有临时节点都被节点替换，这些节点可以使用称为transform的组件转换为输出。例如，为存在的对象引用创建链接，为不存在的对象引用创建简单文本节点。"

#: ../../sphinx/doc/extdev/tutorial.rst:105
msgid "**Phase 4: Writing**"
msgstr "**阶段4：写作**"

#: ../../sphinx/doc/extdev/tutorial.rst:107
msgid ""
"This phase converts the resolved doctrees to the desired output format, such"
" as HTML or LaTeX.  This happens via a so-called docutils writer that visits"
" the individual nodes of each doctree and produces some output in the "
"process."
msgstr ""
"此阶段将解析的doctree转换为所需的输出格式，例如HTML或LaTeX。这是通过一个所谓的docutils编写器来实现的，它访问每个doctree的各个节点，并在这个过程中生成一些输出。"

#: ../../sphinx/doc/extdev/tutorial.rst:113
msgid ""
"Some builders deviate from this general build plan, for example, the builder"
" that checks external links does not need anything more than the parsed "
"doctrees and therefore does not have phases 2--4."
msgstr "一些构建器偏离了这个一般的构建计划，例如，检查外部链接的构建器只需要解析的doctree，因此不需要第2-4阶段。"

#: ../../sphinx/doc/extdev/tutorial.rst:119
msgid "Extension Design"
msgstr "插件设计"

#: ../../sphinx/doc/extdev/tutorial.rst:121
msgid "We want the extension to add the following to Sphinx:"
msgstr "我们希望插件将以下内容添加到Sphinx中："

#: ../../sphinx/doc/extdev/tutorial.rst:123
msgid ""
"A \"todo\" directive, containing some content that is marked with \"TODO\", "
"and only shown in the output if a new config value is set.  (Todo entries "
"should not be in the output by default.)"
msgstr ""
"一个“todo”指令，包含一些用“todo”标记的内容，并且只有在设置了新的配置值时才会显示在输出中。（默认情况下，Todo条目不应出现在输出中。）"

#: ../../sphinx/doc/extdev/tutorial.rst:127
msgid ""
"A \"todolist\" directive that creates a list of all todo entries throughout "
"the documentation."
msgstr "一个“todolist”指令，用于创建文档中所有todo条目的列表。"

#: ../../sphinx/doc/extdev/tutorial.rst:130
msgid "For that, we will need to add the following elements to Sphinx:"
msgstr "为此，我们需要在Sphinx中添加以下元素："

#: ../../sphinx/doc/extdev/tutorial.rst:132
msgid "New directives, called ``todo`` and ``todolist``."
msgstr "新指令，称为“todo”和“todolist”。"

#: ../../sphinx/doc/extdev/tutorial.rst:133
msgid ""
"New document tree nodes to represent these directives, conventionally also "
"called ``todo`` and ``todolist``.  We wouldn't need new nodes if the new "
"directives only produced some content representable by existing nodes."
msgstr "表示这些指令的新文档树节点，通常也称为“todo”和“todolist”。如果新指令只产生一些可由现有节点表示的内容，我们就不需要新节点。"

#: ../../sphinx/doc/extdev/tutorial.rst:136
msgid ""
"A new config value ``todo_include_todos`` (config value names should start "
"with the extension name, in order to stay unique) that controls whether todo"
" entries make it into the output."
msgstr "一个新的配置值“todo”include_todos`（配置值名称应以扩展名开头，以保持唯一性），用于控制todo条目是否将其放入输出中。"

#: ../../sphinx/doc/extdev/tutorial.rst:139
msgid ""
"New event handlers: one for the :event:`doctree-resolved` event, to replace "
"the todo and todolist nodes, and one for :event:`env-purge-doc` (the reason "
"for that will be covered later)."
msgstr ""
"新的事件处理程序：一个用于：event:`doctree resolved`事件，用于替换todo和todolist节点；一个用于：event:`env"
" purge doc`（其原因将在后面介绍）。"

#: ../../sphinx/doc/extdev/tutorial.rst:145
msgid "The Setup Function"
msgstr "设置函数"

#: ../../sphinx/doc/extdev/tutorial.rst:149
msgid ""
"The new elements are added in the extension's setup function.  Let us create"
" a new Python module called :file:`todo.py` and add the setup function::"
msgstr "新元素被添加到扩展的setup函数中。让我们创建一个名为：file:`待办事项`并添加设置函数："

#: ../../sphinx/doc/extdev/tutorial.rst:168
msgid ""
"The calls in this function refer to classes and functions not yet written.  "
"What the individual calls do is the following:"
msgstr "此函数中的调用引用尚未编写的类和函数。单独调用的作用如下："

#: ../../sphinx/doc/extdev/tutorial.rst:171
msgid ""
":meth:`~Sphinx.add_config_value` lets Sphinx know that it should recognize "
"the new *config value* ``todo_include_todos``, whose default value should be"
" ``False`` (this also tells Sphinx that it is a boolean value)."
msgstr ""
"：方法：`~Sphinx.add_config_值`让Sphinx知道它应该识别新的*config值*``todo_include_todos```，它的默认值应该是`False`（这也告诉Sphinx它是一个布尔值）。"

#: ../../sphinx/doc/extdev/tutorial.rst:175
msgid ""
"If the third argument was ``'html'``, HTML documents would be full rebuild "
"if the config value changed its value.  This is needed for config values "
"that influence reading (build phase 1)."
msgstr ""
"如果第三个参数是“html”，那么如果config值更改了其值，则html文档将完全重新生成。这对于影响读取的配置值是必需的（构建阶段1）。"

#: ../../sphinx/doc/extdev/tutorial.rst:179
msgid ""
":meth:`~Sphinx.add_node` adds a new *node class* to the build system.  It "
"also can specify visitor functions for each supported output format.  These "
"visitor functions are needed when the new nodes stay until phase 4 -- since "
"the ``todolist`` node is always replaced in phase 3, it doesn't need any."
msgstr ""
"：方法：`~Sphinx.add_节点`向生成系统添加新的*node "
"class*。它还可以为每个支持的输出格式指定访问者函数。当新节点停留到阶段4时，就需要这些访问者函数——因为“todolist”节点在阶段3中总是被替换，所以它不需要任何访问器函数。"

#: ../../sphinx/doc/extdev/tutorial.rst:184
msgid ""
"We need to create the two node classes ``todo`` and ``todolist`` later."
msgstr "我们需要稍后创建两个节点类“todo”和“todolist”。"

#: ../../sphinx/doc/extdev/tutorial.rst:186
msgid ""
":meth:`~Sphinx.add_directive` adds a new *directive*, given by name and "
"class."
msgstr "：方法：`~Sphinx.add_指令`添加一个由名称和类给定的新*指令*。"

#: ../../sphinx/doc/extdev/tutorial.rst:188
msgid "The handler functions are created later."
msgstr "稍后将创建处理程序函数。"

#: ../../sphinx/doc/extdev/tutorial.rst:190
msgid ""
"Finally, :meth:`~Sphinx.connect` adds an *event handler* to the event whose "
"name is given by the first argument.  The event handler function is called "
"with several arguments which are documented with the event."
msgstr ""
"最后，：meth:`~Sphinx.connect`将*event "
"handler*添加到由第一个参数指定名称的事件。调用事件处理程序函数时使用了多个随事件一起记录的参数。"

#: ../../sphinx/doc/extdev/tutorial.rst:196
msgid "The Node Classes"
msgstr "节点的类"

#: ../../sphinx/doc/extdev/tutorial.rst:198
msgid "Let's start with the node classes::"
msgstr "让我们从节点类开始："

#: ../../sphinx/doc/extdev/tutorial.rst:214
msgid ""
"Node classes usually don't have to do anything except inherit from the "
"standard docutils classes defined in :mod:`docutils.nodes`.  ``todo`` "
"inherits from ``Admonition`` because it should be handled like a note or "
"warning, ``todolist`` is just a \"general\" node."
msgstr ""
"除了从mod:`docutils.nodes文件`. "
"``todo``继承自``adminion``因为它应该像注释或警告那样处理，`todolist`只是一个“常规”节点。"

#: ../../sphinx/doc/extdev/tutorial.rst:221
msgid ""
"Many extensions will not have to create their own node classes and work fine"
" with the nodes already provided by `docutils "
"<http://docutils.sourceforge.net/docs/ref/doctree.html>`__ and :ref:`Sphinx "
"<nodes>`."
msgstr ""
"许多插件不必创建自己的节点类，并且可以很好地处理由`docutils提供的节点<http://docutils.sourceforge.net/docs/ref/doctree.html>`__和：ref:`Sphinx`"

#: ../../sphinx/doc/extdev/tutorial.rst:228
msgid "The Directive Classes"
msgstr "指令类"

#: ../../sphinx/doc/extdev/tutorial.rst:230
msgid ""
"A directive class is a class deriving usually from "
":class:`docutils.parsers.rst.Directive`.  The directive interface is also "
"covered in detail in the `docutils documentation`_; the important thing is "
"that the class should have attributes that configure the allowed markup, and"
" a ``run`` method that returns a list of nodes."
msgstr ""
"指令类通常是派生自以下类的类：`docutils.parsers.rst。指令`。“docutils "
"documentation”中也详细介绍了指令接口；重要的是类应该具有配置允许标记的属性，以及返回节点列表的“run”方法。"

#: ../../sphinx/doc/extdev/tutorial.rst:236
msgid "The ``todolist`` directive is quite simple::"
msgstr "“todolist”指令非常简单："

#: ../../sphinx/doc/extdev/tutorial.rst:245
msgid ""
"An instance of our ``todolist`` node class is created and returned.  The "
"todolist directive has neither content nor arguments that need to be "
"handled."
msgstr "创建并返回“todolist”节点类的实例。todolist指令既没有需要处理的内容，也没有需要处理的参数。"

#: ../../sphinx/doc/extdev/tutorial.rst:248
msgid "The ``todo`` directive function looks like this::"
msgstr "“todo”指令函数如下所示："

#: ../../sphinx/doc/extdev/tutorial.rst:278
msgid ""
"Several important things are covered here. First, as you can see, you can "
"refer to the build environment instance using "
"``self.state.document.settings.env``."
msgstr "这里有几件重要的事。首先，如您所见，您可以使用``self.state.document.settings.env``."

#: ../../sphinx/doc/extdev/tutorial.rst:281
msgid ""
"Then, to act as a link target (from the todolist), the todo directive needs "
"to return a target node in addition to the todo node.  The target ID (in "
"HTML, this will be the anchor name) is generated by using "
"``env.new_serialno`` which returns a new unique integer on each call and "
"therefore leads to unique target names.  The target node is instantiated "
"without any text (the first two arguments)."
msgstr ""
"然后，要充当链接目标（来自todolist），除了todo节点外，todo指令还需要返回一个目标节点。目标ID（在HTML中，这将是锚点名称）是通过使用``新环境序列号``因此，每个调用都返回一个唯一的整数和一个唯一的调用。目标节点实例化时没有任何文本（前两个参数）。"

#: ../../sphinx/doc/extdev/tutorial.rst:288
msgid ""
"On creating admonition node, the content body of the directive are parsed "
"using ``self.state.nested_parse``.  The first argument gives the content "
"body, and the second one gives content offset.  The third argument gives the"
" parent node of parsed result, in our case the ``todo`` node."
msgstr ""
"在创建警告节点时，使用``self.state.nested_解析``. "
"第一个参数给出内容体，第二个参数给出内容偏移量。第三个参数给出解析结果的父节点，在我们的例子中是“todo”节点。"

#: ../../sphinx/doc/extdev/tutorial.rst:293
msgid ""
"Then, the todo node is added to the environment.  This is needed to be able "
"to create a list of all todo entries throughout the documentation, in the "
"place where the author puts a ``todolist`` directive.  For this case, the "
"environment attribute ``todo_all_todos`` is used (again, the name should be "
"unique, so it is prefixed by the extension name).  It does not exist when a "
"new environment is created, so the directive must check and create it if "
"necessary.  Various information about the todo entry's location are stored "
"along with a copy of the node."
msgstr ""
"然后，将todo节点添加到环境中。这是为了能够创建文档中所有todo条目的列表，在作者放置“todolist”指令的地方。在这种情况下，使用环境属性“todo_all_todos”（同样，名称应该是唯一的，因此它以扩展名作为前缀）。它在创建新环境时不存在，因此指令必须检查并在必要时创建它。有关todo条目位置的各种信息都与节点的副本一起存储。"

#: ../../sphinx/doc/extdev/tutorial.rst:302
msgid ""
"In the last line, the nodes that should be put into the doctree are "
"returned: the target node and the admonition node."
msgstr "在最后一行中，将返回应该放入文档树中的节点：目标节点和警告节点。"

#: ../../sphinx/doc/extdev/tutorial.rst:305
msgid "The node structure that the directive returns looks like this::"
msgstr "指令返回的节点结构如下所示："

#: ../../sphinx/doc/extdev/tutorial.rst:323
msgid "The Event Handlers"
msgstr "事件处理程序"

#: ../../sphinx/doc/extdev/tutorial.rst:325
msgid ""
"Finally, let's look at the event handlers.  First, the one for the :event"
":`env-purge-doc` event::"
msgstr "最后，让我们看看事件处理程序。首先，用于：event:`env purge doc`event:："

#: ../../sphinx/doc/extdev/tutorial.rst:334
msgid ""
"Since we store information from source files in the environment, which is "
"persistent, it may become out of date when the source file changes.  "
"Therefore, before each source file is read, the environment's records of it "
"are cleared, and the :event:`env-purge-doc` event gives extensions a chance "
"to do the same. Here we clear out all todos whose docname matches the given "
"one from the ``todo_all_todos`` list.  If there are todos left in the "
"document, they will be added again during parsing."
msgstr ""
"由于我们将源文件中的信息存储在环境中，这是持久的，所以当源文件更改时，它可能会过期。因此，在读取每个源文件之前，环境中对它的记录都会被清除，并且：event:`env"
" purge "
"doc`事件为扩展提供了执行相同操作的机会。在这里，我们从“todo”列表中清除docname与给定todo匹配的todo。如果文档中还剩下todo，则在解析期间将再次添加它们。"

#: ../../sphinx/doc/extdev/tutorial.rst:342
msgid ""
"The other handler belongs to the :event:`doctree-resolved` event.  This "
"event is emitted at the end of phase 3 and allows custom resolving to be "
"done::"
msgstr "另一个处理程序属于：event:`doctree resolved`事件。此事件在阶段3结束时发出，并允许执行自定义解析："

#: ../../sphinx/doc/extdev/tutorial.rst:386
msgid ""
"It is a bit more involved.  If our new \"todo_include_todos\" config value "
"is false, all todo and todolist nodes are removed from the documents."
msgstr "有点牵扯。如果新的“todo_include_todos”配置值为false，则将从文档中删除所有todo和todolist节点。"

#: ../../sphinx/doc/extdev/tutorial.rst:389
msgid ""
"If not, todo nodes just stay where and how they are.  Todolist nodes are "
"replaced by a list of todo entries, complete with backlinks to the location "
"where they come from.  The list items are composed of the nodes from the "
"todo entry and docutils nodes created on the fly: a paragraph for each "
"entry, containing text that gives the location, and a link (reference node "
"containing an italic node) with the backreference.  The reference URI is "
"built by ``app.builder.get_relative_uri`` which creates a suitable URI "
"depending on the used builder, and appending the todo node's (the target's) "
"ID as the anchor name."
msgstr ""
"如果不是，todo节点只是停留在它们的位置和状态。Todolist节点被todo条目列表替换，并带有指向它们的来源位置的反向链接。列表项由来自todo条目的节点和动态创建的docutils节点组成：每个条目的段落，包含给出位置的文本，以及带有反向引用的链接（引用节点包含斜体节点）。引用URI由``app.builder.get_相对\\u"
" uri``它根据使用的构建器创建一个合适的URI，并附加todo节点（目标的）ID作为锚定名称。"
