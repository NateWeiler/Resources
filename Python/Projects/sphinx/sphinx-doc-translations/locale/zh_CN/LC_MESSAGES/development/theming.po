# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2020, Georg Brandl and the Sphinx team
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# wendi cao <651645601@qq.com>, 2020
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 4.0.0+/d9280e253\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-13 23:32+0000\n"
"PO-Revision-Date: 2020-08-01 22:23+0000\n"
"Last-Translator: wendi cao <651645601@qq.com>, 2020\n"
"Language-Team: Chinese (China) (https://www.transifex.com/sphinx-doc/teams/15434/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../sphinx/doc/development/theming.rst:2
msgid "HTML theme development"
msgstr ""

#: ../../sphinx/doc/development/theming.rst:8
msgid ""
"This document provides information about creating your own theme. If you "
"simply wish to use a pre-existing HTML themes, refer to "
":doc:`/usage/theming`."
msgstr "本文档提供有关创建您自己的主题的信息。如果您只想使用预先存在的HTML主题，请参阅：doc:`/usage/themming`。"

#: ../../sphinx/doc/development/theming.rst:12
msgid ""
"Sphinx supports changing the appearance of its HTML output via *themes*.  A "
"theme is a collection of HTML templates, stylesheet(s) and other static "
"files. Additionally, it has a configuration file which specifies from which "
"theme to inherit, which highlighting style to use, and what options exist "
"for customizing the theme's look and feel."
msgstr ""
"Sphinx支持通过*themes*更改其HTML输出的外观。主题是HTML模板、样式表和其他静态文件的集合。此外，它还有一个配置文件，指定从哪个主题继承，使用哪种突出显示样式，以及自定义主题外观的选项。"

#: ../../sphinx/doc/development/theming.rst:18
msgid ""
"Themes are meant to be project-unaware, so they can be used for different "
"projects without change."
msgstr "主题是指不受项目影响的，因此它们可以用于不同的项目而无需更改。"

#: ../../sphinx/doc/development/theming.rst:23
msgid ""
"See :ref:`dev-extensions` for more information that may be helpful in "
"developing themes."
msgstr ""

#: ../../sphinx/doc/development/theming.rst:28
msgid "Creating themes"
msgstr "创建主题"

#: ../../sphinx/doc/development/theming.rst:30
msgid ""
"Themes take the form of either a directory or a zipfile (whose name is the "
"theme name), containing the following:"
msgstr "主题采用目录或zipfile（其名称为主题名称）的形式，包含以下内容："

#: ../../sphinx/doc/development/theming.rst:33
msgid "A :file:`theme.conf` file."
msgstr "A:文件：`theme.conf`文件。"

#: ../../sphinx/doc/development/theming.rst:34
msgid "HTML templates, if needed."
msgstr "HTML模板，如果需要。"

#: ../../sphinx/doc/development/theming.rst:35
msgid ""
"A ``static/`` directory containing any static files that will be copied to "
"the output static directory on build.  These can be images, styles, script "
"files."
msgstr "“static/`”目录，其中包含将在生成时复制到输出静态目录的任何静态文件。这些可以是图像、样式、脚本文件。"

#: ../../sphinx/doc/development/theming.rst:38
msgid ""
"The :file:`theme.conf` file is in INI format [1]_ (readable by the standard "
"Python :mod:`ConfigParser` module) and has the following structure:"
msgstr "文件：`theme.conf`文件采用INI格式[1]\\（可由标准Python:mod:`ConfigParser`模块读取），其结构如下："

#: ../../sphinx/doc/development/theming.rst:52
msgid ""
"The **inherit** setting gives the name of a \"base theme\", or ``none``.  "
"The base theme will be used to locate missing templates (most themes will "
"not have to supply most templates if they use ``basic`` as the base theme), "
"its options will be inherited, and all of its static files will be used as "
"well. If you want to also inherit the stylesheet, include it via CSS' "
"``@import`` in your own."
msgstr ""
"**inherit**设置提供“基本主题”或“无”的名称。基本主题将用于查找缺少的模板（如果大多数主题使用“basic”作为基本主题，则大多数主题不必提供大多数模板），它的选项将被继承，并且它的所有静态文件也将被使用。如果您还想继承样式表，可以通过CSS'`@import``将其包含在自己的样式表中。"

#: ../../sphinx/doc/development/theming.rst:59
msgid ""
"The **stylesheet** setting gives the name of a CSS file which will be "
"referenced in the HTML header.  If you need more than one CSS file, either "
"include one from the other via CSS' ``@import``, or use a custom HTML "
"template that adds ``<link rel=\"stylesheet\">`` tags as necessary.  Setting"
" the :confval:`html_style` config value will override this setting."
msgstr ""
"**stylesheet**设置提供将在HTML头中引用的CSS文件的名称。如果您需要多个CSS文件，可以通过CSS'`@import``从另一个文件中包含一个，或者使用根据需要添加``1``标记的自定义HTML模板。设置：confval:`html_style`配置值将覆盖此设置。"

#: ../../sphinx/doc/development/theming.rst:65
msgid ""
"The **pygments_style** setting gives the name of a Pygments style to use for"
" highlighting.  This can be overridden by the user in the "
":confval:`pygments_style` config value."
msgstr ""
"**pygments\\ustyle**设置提供用于突出显示的pygments样式的名称。用户可以在：confval:`pygments\\ustyle`配置值中重写此设置。"

#: ../../sphinx/doc/development/theming.rst:69
msgid ""
"The **pygments_dark_style** setting gives the name of a Pygments style to "
"use for highlighting when the CSS media query ``(prefers-color-scheme: "
"dark)`` evaluates to true. It is injected into the page using "
":meth:`~Sphinx.add_css_file()`."
msgstr ""
"当CSS媒体查询'`（首选配色方案：深色）``的计算结果为true时，**pygments_dark_style**设置提供了pygments样式的名称，用于突出显示。使用：meth:`~Sphinx.add_css_文件()`."

#: ../../sphinx/doc/development/theming.rst:74
msgid ""
"The **sidebars** setting gives the comma separated list of sidebar templates"
" for constructing sidebars.  This can be overridden by the user in the "
":confval:`html_sidebars` config value."
msgstr ""
"**sidebars**设置提供了用逗号分隔的侧边栏模板列表，用于构造提要栏。用户可以在：confval:`html_sidebars`配置值中覆盖此值。"

#: ../../sphinx/doc/development/theming.rst:78
msgid ""
"The **options** section contains pairs of variable names and default values."
" These options can be overridden by the user in "
":confval:`html_theme_options` and are accessible from all templates as "
"``theme_<name>``."
msgstr ""
"**options**部分包含变量名和默认值对。用户可以在以下位置重写这些选项：confval:`html_theme_options`并且可以从所有模板中以“theme_1`”的形式访问这些选项。"

#: ../../sphinx/doc/development/theming.rst:82
msgid "sidebar settings"
msgstr "边栏设置"

#: ../../sphinx/doc/development/theming.rst:89
msgid "Distribute your theme as a Python package"
msgstr "将主题作为Python包分发"

#: ../../sphinx/doc/development/theming.rst:91
msgid ""
"As a way to distribute your theme, you can use Python package.  Python "
"package brings to users easy setting up ways."
msgstr "作为分发主题的一种方式，您可以使用Python包。Python包为用户提供了简单的设置方法。"

#: ../../sphinx/doc/development/theming.rst:94
msgid ""
"To distribute your theme as a Python package, please define an entry point "
"called ``sphinx.html_themes`` in your ``setup.py`` file, and write a "
"``setup()`` function to register your themes using ``add_html_theme()`` API "
"in it::"
msgstr ""
"要将主题作为Python包分发，请定义一个名为``sphinx.html_主题``在你的``设置.py``文件，然后编写一个“setup（）`”函数，使用其中的“add_html_theme（）`”API注册主题："

#: ../../sphinx/doc/development/theming.rst:115
msgid ""
"If your theme package contains two or more themes, please call "
"``add_html_theme()`` twice or more."
msgstr "如果您的主题包包含两个或多个主题，请调用“add_html_theme（）`”两次或更多。"

#: ../../sphinx/doc/development/theming.rst:118
msgid "'sphinx_themes' entry_points feature."
msgstr "“sphinx_themes”入口点功能。"

#: ../../sphinx/doc/development/theming.rst:121
msgid "``sphinx_themes`` entry_points has been deprecated."
msgstr "``sphinx_themes“入口点”已被弃用。"

#: ../../sphinx/doc/development/theming.rst:124
msgid "``sphinx.html_themes`` entry_points feature."
msgstr "``sphinx.html_themes`` 进入点特征。"

#: ../../sphinx/doc/development/theming.rst:129
msgid "Templating"
msgstr "模板"

#: ../../sphinx/doc/development/theming.rst:131
msgid ""
"The :doc:`guide to templating </templating>` is helpful if you want to write"
" your own templates.  What is important to keep in mind is the order in "
"which Sphinx searches for templates:"
msgstr ""

#: ../../sphinx/doc/development/theming.rst:135
msgid "First, in the user's ``templates_path`` directories."
msgstr "首先，在用户的“templates_path”目录中。"

#: ../../sphinx/doc/development/theming.rst:136
msgid "Then, in the selected theme."
msgstr "然后，在选定的主题中。"

#: ../../sphinx/doc/development/theming.rst:137
msgid "Then, in its base theme, its base's base theme, etc."
msgstr "然后，在它的基主题中，它的基主题，等等。"

#: ../../sphinx/doc/development/theming.rst:139
msgid ""
"When extending a template in the base theme with the same name, use the "
"theme name as an explicit directory: ``{% extends \"basic/layout.html\" "
"%}``.  From a user ``templates_path`` template, you can still use the "
"\"exclamation mark\" syntax as described in the templating document."
msgstr ""
"在基主题中使用相同名称扩展模板时，请将主题名称用作显式目录：`{%extends”basic/布局.html\" %}``. "
"从用户“templates_path”模板中，您仍然可以使用模板文档中描述的“感叹号”语法。"

#: ../../sphinx/doc/development/theming.rst:148
msgid "Static templates"
msgstr "静态模板"

#: ../../sphinx/doc/development/theming.rst:150
msgid ""
"Since theme options are meant for the user to configure a theme more easily,"
" without having to write a custom stylesheet, it is necessary to be able to "
"template static files as well as HTML files.  Therefore, Sphinx supports so-"
"called \"static templates\", like this:"
msgstr ""
"因为主题选项是为了让用户更容易地配置一个主题，而不必编写自定义样式表，所以必须能够模板化静态文件和HTML文件。因此，Sphinx支持所谓的“静态模板”，如下所示："

#: ../../sphinx/doc/development/theming.rst:155
msgid ""
"If the name of a file in the ``static/`` directory of a theme (or in the "
"user's static path, for that matter) ends with ``_t``, it will be processed "
"by the template engine.  The ``_t`` will be left from the final file name.  "
"For example, the *classic* theme has a file ``static/classic.css_t`` which "
"uses templating to put the color options into the stylesheet.  When a "
"documentation is built with the classic theme, the output directory will "
"contain a ``_static/classic.css`` file where all template tags have been "
"processed."
msgstr ""
"如果主题的“static/`”目录（或用户的静态路径中）中的文件名以“u "
"t”结尾，则模板引擎将处理该文件。“ut”将从最终文件名中保留。例如，*classic*主题有一个文件“static”/经典.css\\``它使用模板将颜色选项放入样式表中。当使用经典主题构建文档时，输出目录将包含一个/经典.css``已处理所有模板标记的文件。"

#: ../../sphinx/doc/development/theming.rst:165
msgid "Use custom page metadata in HTML templates"
msgstr ""

#: ../../sphinx/doc/development/theming.rst:167
msgid ""
"Any key / value pairs in :doc:`field lists </usage/restructuredtext/field-"
"lists>` that are placed *before* the page's title will be available to the "
"Jinja template when building the page within the :data:`meta` attribute. For"
" example, if a page had the following text before its first title:"
msgstr ""

#: ../../sphinx/doc/development/theming.rst:179
msgid "Then it could be accessed within a Jinja template like so:"
msgstr ""

#: ../../sphinx/doc/development/theming.rst:187
msgid ""
"Note the check that ``meta`` is a dictionary (\"mapping\" in Jinja "
"terminology) to ensure that using it in this way is valid."
msgstr ""

#: ../../sphinx/doc/development/theming.rst:192
msgid "Defining custom template functions"
msgstr ""

#: ../../sphinx/doc/development/theming.rst:194
msgid ""
"Sometimes it is useful to define your own function in Python that you wish "
"to then use in a template. For example, if you'd like to insert a template "
"value with logic that depends on the user's configuration in the project, or"
" if you'd like to include non-trivial checks and provide friendly error "
"messages for incorrect configuration in the template."
msgstr ""

#: ../../sphinx/doc/development/theming.rst:200
msgid ""
"To define your own template function, you'll need to define two functions "
"inside your module:"
msgstr ""

#: ../../sphinx/doc/development/theming.rst:203
msgid ""
"A **page context event handler** (or **registration**) function. This is "
"connected to the :class:`.Sphinx` application via an event callback."
msgstr ""

#: ../../sphinx/doc/development/theming.rst:205
msgid "A **template function** that you will use in your Jinja template."
msgstr ""

#: ../../sphinx/doc/development/theming.rst:207
msgid ""
"First, define the registration function, which accepts the arguments for "
":event:`html-page-context`."
msgstr ""

#: ../../sphinx/doc/development/theming.rst:210
msgid ""
"Within the registration function, define the template function that you'd "
"like to use within Jinja. The template function should return a string or "
"Python objects (lists, dictionaries) with strings inside that Jinja uses in "
"the templating process"
msgstr ""

#: ../../sphinx/doc/development/theming.rst:216
msgid ""
"The template function will have access to all of the variables that are "
"passed to the registration function."
msgstr ""

#: ../../sphinx/doc/development/theming.rst:219
msgid ""
"At the end of the registration function, add the template function to the "
"Sphinx application's context with ``context['template_func'] = "
"template_func``."
msgstr ""

#: ../../sphinx/doc/development/theming.rst:222
msgid ""
"Finally, in your extension's ``setup()`` function, add your registration "
"function as a callback for :event:`html-page-context`."
msgstr ""

#: ../../sphinx/doc/development/theming.rst:239
msgid "Now, you will have access to this function in jinja like so:"
msgstr ""

#: ../../sphinx/doc/development/theming.rst:249
msgid "Add your own static files to the build assets"
msgstr ""

#: ../../sphinx/doc/development/theming.rst:251
msgid ""
"If you are packaging your own build assets with an extension (e.g., a CSS or"
" JavaScript file), you need to ensure that they are placed in the "
"``_static/`` folder of HTML outputs. To do so, you may copy them directly "
"into a build's ``_static/`` folder at build time, generally via an event "
"hook. Here is some sample code to accomplish this:"
msgstr ""

#: ../../sphinx/doc/development/theming.rst:269
msgid "Inject JavaScript based on user configuration"
msgstr ""

#: ../../sphinx/doc/development/theming.rst:271
msgid ""
"If your extension makes use of JavaScript, it can be useful to allow users "
"to control its behavior using their Sphinx configuration. However, this can "
"be difficult to do if your JavaScript comes in the form of a static library "
"(which will not be built with Jinja)."
msgstr ""

#: ../../sphinx/doc/development/theming.rst:276
msgid ""
"There are two ways to inject variables into the JavaScript space based on "
"user configuration."
msgstr ""

#: ../../sphinx/doc/development/theming.rst:279
msgid ""
"First, you may append ``_t`` to the end of any static files included with "
"your extension. This will cause Sphinx to process these files with the "
"templating engine, allowing you to embed variables and control behavior."
msgstr ""

#: ../../sphinx/doc/development/theming.rst:283
msgid "For example, the following JavaScript structure:"
msgstr ""

#: ../../sphinx/doc/development/theming.rst:292
msgid ""
"Will result in the following static file placed in your HTML's build output:"
msgstr ""

#: ../../sphinx/doc/development/theming.rst:301
msgid "See :ref:`theming-static-templates` for more information."
msgstr ""

#: ../../sphinx/doc/development/theming.rst:303
msgid ""
"Second, you may use the :meth:`Sphinx.add_js_file` method without pointing "
"it to a file. Normally, this method is used to insert a new JavaScript file "
"into your site. However, if you do *not* pass a file path, but instead pass "
"a string to the \"body\" argument, then this text will be inserted as "
"JavaScript into your site's head. This allows you to insert variables into "
"your project's JavaScript from Python."
msgstr ""

#: ../../sphinx/doc/development/theming.rst:310
msgid ""
"For example, the following code will read in a user-configured value and "
"then insert this value as a JavaScript variable, which your extension's "
"JavaScript code may use:"
msgstr ""

#: ../../sphinx/doc/development/theming.rst:329
msgid ""
"As a result, in your theme you can use code that depends on the presence of "
"this variable. Users can control the variable's value by defining it in "
"their :file:`conf.py` file."
msgstr ""

#: ../../sphinx/doc/development/theming.rst:334
msgid ""
"It is not an executable Python file, as opposed to :file:`conf.py`, because "
"that would pose an unnecessary security risk if themes are shared."
msgstr "它不是一个可执行的Python文件，而不是：file:`配置文件`，因为如果共享主题，则会带来不必要的安全风险。"
