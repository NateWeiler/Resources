# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, Georg Brandl and the Sphinx team
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Georg Brandl <g.brandl@gmx.net>, 2018
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 1.8.0+\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-06-25 15:55+0000\n"
"PO-Revision-Date: 2018-02-12 13:47+0000\n"
"Last-Translator: Georg Brandl <g.brandl@gmx.net>, 2018\n"
"Language-Team: German (https://www.transifex.com/sphinx-doc/teams/15434/de/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: de\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../sphinx/doc/ext/autodoc.rst:4
msgid ":mod:`sphinx.ext.autodoc` -- Include documentation from docstrings"
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:12
msgid ""
"This extension can import the modules you are documenting, and pull in "
"documentation from docstrings in a semi-automatic way."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:17
msgid ""
"For Sphinx (actually, the Python interpreter that executes Sphinx) to find "
"your module, it must be importable.  That means that the module or the "
"package must be in one of the directories on :data:`sys.path` -- adapt your "
":data:`sys.path` in the configuration file accordingly."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:24
msgid ""
":mod:`~sphinx.ext.autodoc` **imports** the modules to be documented.  If any"
" modules have side effects on import, these will be executed by ``autodoc`` "
"when ``sphinx-build`` is run."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:28
msgid ""
"If you document scripts (as opposed to library modules), make sure their "
"main routine is protected by a ``if __name__ == '__main__'`` condition."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:31
msgid ""
"For this to work, the docstrings must of course be written in correct "
"reStructuredText.  You can then use all of the usual Sphinx markup in the "
"docstrings, and it will end up correctly in the documentation.  Together "
"with hand-written documentation, this technique eases the pain of having to "
"maintain two locations for documentation, while at the same time avoiding "
"auto-generated-looking pure API documentation."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:38
msgid ""
"If you prefer `NumPy`_ or `Google`_ style docstrings over reStructuredText, "
"you can also enable the :mod:`napoleon <sphinx.ext.napoleon>` extension. "
":mod:`napoleon <sphinx.ext.napoleon>` is a preprocessor that converts your "
"docstrings to correct reStructuredText before :mod:`autodoc` processes them."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:48
msgid ""
":mod:`autodoc` provides several directives that are versions of the usual "
":rst:dir:`py:module`, :rst:dir:`py:class` and so forth.  On parsing time, "
"they import the corresponding module and extract the docstring of the given "
"objects, inserting them into the page source under a suitable "
":rst:dir:`py:module`, :rst:dir:`py:class` etc.  directive."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:56
msgid ""
"Just as :rst:dir:`py:class` respects the current :rst:dir:`py:module`, "
":rst:dir:`autoclass` will also do so.  Likewise, :rst:dir:`automethod` will "
"respect the current :rst:dir:`py:class`."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:65
msgid ""
"Document a module, class or exception.  All three directives will by default"
" only insert the docstring of the object itself::"
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:70
msgid "will produce source like this::"
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:76
msgid ""
"The \"auto\" directives can also contain content of their own, it will be "
"inserted into the resulting non-auto directive source after the docstring "
"(but before any automatic member documentation)."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:80
msgid ""
"Therefore, you can also mix automatic and non-automatic member "
"documentation, like so::"
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:90
msgid "**Options and advanced usage**"
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:92
msgid ""
"If you want to automatically document members, there's a ``members`` "
"option::"
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:98
msgid "will document all module members (recursively), and ::"
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:103
msgid ""
"will document all non-private member functions and properties (that is, "
"those whose name doesn't start with ``_``)."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:106
msgid ""
"For modules, ``__all__`` will be respected when looking for members unless "
"you give the ``ignore-module-all`` flag option.  Without ``ignore-module-"
"all``, the order of the members will also be the order in ``__all__``."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:111
msgid ""
"You can also give an explicit list of members; only these will then be "
"documented::"
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:117
msgid ""
"If you want to make the ``members`` option (or other flag options described "
"below) the default, see :confval:`autodoc_default_flags`."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:120
msgid ""
"Members without docstrings will be left out, unless you give the ``undoc-"
"members`` flag option::"
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:127
msgid ""
"\"Private\" members (that is, those named like ``_private`` or "
"``__private``) will be included if the ``private-members`` flag option is "
"given."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:132
msgid ""
"Python \"special\" members (that is, those named like ``__special__``) will "
"be included if the ``special-members`` flag option is given::"
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:140
msgid "would document both \"private\" and \"special\" members of the class."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:144
msgid ""
"The option can now take arguments, i.e. the special members to document."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:147
msgid ""
"For classes and exceptions, members inherited from base classes will be left"
" out when documenting all members, unless you give the ``inherited-members``"
" flag option, in addition to ``members``::"
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:155
msgid ""
"This can be combined with ``undoc-members`` to document *all* available "
"members of the class or module."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:158
msgid ""
"Note: this will lead to markup errors if the inherited members come from a "
"module whose docstrings are not reST formatted."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:163
msgid ""
"It's possible to override the signature for explicitly documented callable "
"objects (functions, methods, classes) with the regular syntax that will "
"override the signature gained from introspection::"
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:171
msgid ""
"This is useful if the signature from the method is hidden by a decorator."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:175
msgid ""
"The :rst:dir:`automodule`, :rst:dir:`autoclass` and :rst:dir:`autoexception`"
" directives also support a flag option called ``show-inheritance``.  When "
"given, a list of base classes will be inserted just below the class "
"signature (when used with :rst:dir:`automodule`, this will be inserted for "
"every class that is documented in the module)."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:183
msgid ""
"All autodoc directives support the ``noindex`` flag option that has the same"
" effect as for standard :rst:dir:`py:function` etc. directives: no index "
"entries are generated for the documented object (and all autodocumented "
"members)."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:190
msgid ""
":rst:dir:`automodule` also recognizes the ``synopsis``, ``platform`` and "
"``deprecated`` options that the standard :rst:dir:`py:module` directive "
"supports."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:196
msgid ""
":rst:dir:`automodule` and :rst:dir:`autoclass` also has an ``member-order`` "
"option that can be used to override the global value of "
":confval:`autodoc_member_order` for one directive."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:202
msgid ""
"The directives supporting member documentation also have a ``exclude-"
"members`` option that can be used to exclude single member names from "
"documentation, if all members are to be documented."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:208
msgid ""
"In an :rst:dir:`automodule` directive with the ``members`` option set, only "
"module members whose ``__module__`` attribute is equal to the module name as"
" given to ``automodule`` will be documented.  This is to prevent "
"documentation of imported classes or functions.  Set the ``imported-"
"members`` option if you want to prevent this behavior and document all "
"available members.  Note that attributes from imported modules will not be "
"documented, because attribute documentation is discovered by parsing the "
"source file of the current module."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:219
msgid ""
"Add a list of modules in the :confval:`autodoc_mock_imports` to prevent "
"import errors to halt the building process when some external dependencies "
"are not importable at build time."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:231
msgid ""
"These work exactly like :rst:dir:`autoclass` etc., but do not offer the "
"options used for automatic member documentation."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:234
msgid ""
":rst:dir:`autodata` and :rst:dir:`autoattribute` support the ``annotation`` "
"option. Without this option, the representation of the object will be shown "
"in the documentation. When the option is given without arguments, only the "
"name of the object will be printed::"
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:244
msgid "You can tell sphinx what should be printed after the name::"
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:249
msgid ""
"For module data members and class attributes, documentation can either be "
"put into a comment with special formatting (using a ``#:`` to start the "
"comment instead of just ``#``), or in a docstring *after* the definition.  "
"Comments need to be either on a line of their own *before* the definition, "
"or immediately after the assignment *on the same line*.  The latter form is "
"restricted to one line only."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:256
msgid ""
"This means that in the following class definition, all attributes can be "
"autodocumented::"
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:278
msgid ""
":rst:dir:`autodata` and :rst:dir:`autoattribute` can now extract docstrings."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:281
msgid "Comment docs are now allowed on the same line after an assignment."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:284
msgid ""
":rst:dir:`autodata` and :rst:dir:`autoattribute` have an ``annotation`` "
"option."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:290
msgid ""
"If you document decorated functions or methods, keep in mind that autodoc "
"retrieves its docstrings by importing the module and inspecting the "
"``__doc__`` attribute of the given function or method.  That means that if a"
" decorator replaces the decorated function with another, it must copy the "
"original ``__doc__`` to the new function."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:296
msgid ""
"From Python 2.5, :func:`functools.wraps` can be used to create well-behaved "
"decorating functions."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:300
msgid "There are also new config values that you can set:"
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:304
msgid ""
"This value selects what content will be inserted into the main body of an "
":rst:dir:`autoclass` directive.  The possible values are:"
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:309
msgid "``\"class\"``"
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:308
msgid ""
"Only the class' docstring is inserted.  This is the default.  You can still "
"document ``__init__`` as a separate method using :rst:dir:`automethod` or "
"the ``members`` option to :rst:dir:`autoclass`."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:312
msgid "``\"both\"``"
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:312
msgid ""
"Both the class' and the ``__init__`` method's docstring are concatenated and"
" inserted."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:315
msgid "``\"init\"``"
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:315
msgid "Only the ``__init__`` method's docstring is inserted."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:319
msgid ""
"If the class has no ``__init__`` method or if the ``__init__`` method's "
"docstring is empty, but the class has a ``__new__`` method's docstring, it "
"is used instead."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:327
msgid ""
"This value selects if automatically documented members are sorted "
"alphabetical (value ``'alphabetical'``), by member type (value "
"``'groupwise'``) or by source order (value ``'bysource'``).  The default is "
"alphabetical."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:332
msgid ""
"Note that for source order, the module must be a Python module with the "
"source code available."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:336
msgid "Support for ``'bysource'``."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:341
msgid ""
"This value is a list of autodoc directive flags that should be automatically"
" applied to all autodoc directives.  The supported flags are ``'members'``, "
"``'undoc-members'``, ``'private-members'``, ``'special-members'``, "
"``'inherited-members'``, ``'show-inheritance'`` and ``'ignore-module-all'``."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:346
msgid ""
"If you set one of these flags in this config value, you can use a negated "
"form, :samp:`'no-{flag}'`, in an autodoc directive, to disable it once. For "
"example, if ``autodoc_default_flags`` is set to ``['members', 'undoc-"
"members']``, and you write a directive like this::"
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:354
msgid "the directive will be interpreted as if only ``:members:`` was given."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:360
msgid ""
"Functions imported from C modules cannot be introspected, and therefore the "
"signature for such functions cannot be automatically determined.  However, "
"it is an often-used convention to put the signature into the first line of "
"the function's docstring."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:365
msgid ""
"If this boolean value is set to ``True`` (which is the default), autodoc "
"will look at the first line of the docstring for functions and methods, and "
"if it looks like a signature, use the line as the signature and remove it "
"from the docstring content."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:374
msgid ""
"This value contains a list of modules to be mocked up. This is useful when "
"some external dependencies are not met at build time and break the building "
"process. You may only specify the root package of the dependencies "
"themselves and omit the sub-modules:"
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:383
msgid "Will mock all imports under the ``django`` package."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:387
msgid ""
"This config value only requires to declare the top-level modules that should"
" be mocked."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:393
msgid ""
"This value controls the behavior of :option:`sphinx-build -W` during "
"importing modules. If ``False`` is given, autodoc forcely suppresses the "
"error if the imported module emits warnings.  By default, ``True``."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:400
msgid ""
"This value controls the docstrings inheritance. If set to True the docstring"
" for classes or methods, if not explicitly set, is inherited form parents."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:404
msgid "The default is ``True``."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:409
msgid "Docstring preprocessing"
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:411
msgid "autodoc provides the following additional events:"
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:417
msgid ""
"Emitted when autodoc has read and processed a docstring.  *lines* is a list "
"of strings -- the lines of the processed docstring -- that the event handler"
" can modify **in place** to change what Sphinx puts into the output."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:0 ../../sphinx/doc/ext/autodoc.rst:0
#: ../../sphinx/doc/ext/autodoc.rst:0
msgid "Parameters"
msgstr "Parameter"

#: ../../sphinx/doc/ext/autodoc.rst:421 ../../sphinx/doc/ext/autodoc.rst:441
#: ../../sphinx/doc/ext/autodoc.rst:483
msgid "the Sphinx application object"
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:422 ../../sphinx/doc/ext/autodoc.rst:442
#: ../../sphinx/doc/ext/autodoc.rst:484
msgid ""
"the type of the object which the docstring belongs to (one of "
"``\"module\"``, ``\"class\"``, ``\"exception\"``, ``\"function\"``, "
"``\"method\"``, ``\"attribute\"``)"
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:425 ../../sphinx/doc/ext/autodoc.rst:445
#: ../../sphinx/doc/ext/autodoc.rst:487
msgid "the fully qualified name of the object"
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:426 ../../sphinx/doc/ext/autodoc.rst:446
#: ../../sphinx/doc/ext/autodoc.rst:488
msgid "the object itself"
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:427 ../../sphinx/doc/ext/autodoc.rst:447
#: ../../sphinx/doc/ext/autodoc.rst:491
msgid ""
"the options given to the directive: an object with attributes "
"``inherited_members``, ``undoc_members``, ``show_inheritance`` and "
"``noindex`` that are true if the flag option of same name was given to the "
"auto directive"
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:431
msgid "the lines of the docstring, see above"
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:437
msgid ""
"Emitted when autodoc has formatted a signature for an object. The event "
"handler can return a new tuple ``(signature, return_annotation)`` to change "
"what Sphinx puts into the output."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:451
msgid ""
"function signature, as a string of the form ``\"(parameter_1, "
"parameter_2)\"``, or ``None`` if introspection didn't succeed and signature "
"wasn't specified in the directive."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:454
msgid ""
"function return annotation as a string of the form ``\" -> annotation\"``, "
"or ``None`` if there is no return annotation"
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:457
msgid ""
"The :mod:`sphinx.ext.autodoc` module provides factory functions for commonly"
" needed docstring processing in event :event:`autodoc-process-docstring`:"
msgstr ""

#: ../../sphinx/sphinx/ext/autodoc/__init__.pydocstring of
#: sphinx.ext.autodoc.cut_lines:1
msgid ""
"Return a listener that removes the first *pre* and last *post* lines of "
"every docstring.  If *what* is a sequence of strings, only docstrings of a "
"type in *what* will be processed."
msgstr ""

#: ../../sphinx/sphinx/ext/autodoc/__init__.pydocstring of
#: sphinx.ext.autodoc.cut_lines:5
msgid "Use like this (e.g. in the ``setup()`` function of :file:`conf.py`)::"
msgstr ""

#: ../../sphinx/sphinx/ext/autodoc/__init__.pydocstring of
#: sphinx.ext.autodoc.cut_lines:10
msgid ""
"This can (and should) be used in place of :confval:`automodule_skip_lines`."
msgstr ""

#: ../../sphinx/sphinx/ext/autodoc/__init__.pydocstring of
#: sphinx.ext.autodoc.between:1
msgid ""
"Return a listener that either keeps, or if *exclude* is True excludes, lines"
" between lines that match the *marker* regular expression.  If no line "
"matches, the resulting docstring would be empty, so no change will be made "
"unless *keepempty* is true."
msgstr ""

#: ../../sphinx/sphinx/ext/autodoc/__init__.pydocstring of
#: sphinx.ext.autodoc.between:6
msgid ""
"If *what* is a sequence of strings, only docstrings of a type in *what* will"
" be processed."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:465
msgid "Skipping members"
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:467
msgid ""
"autodoc allows the user to define a custom method for determining whether a "
"member should be included in the documentation by using the following event:"
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:474
msgid ""
"Emitted when autodoc has to decide whether a member should be included in "
"the documentation.  The member is excluded if a handler returns ``True``.  "
"It is included if the handler returns ``False``."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:478
msgid ""
"If more than one enabled extension handles the ``autodoc-skip-member`` "
"event, autodoc will use the first non-``None`` value returned by a handler. "
"Handlers should return ``None`` to fall back to the skipping behavior of "
"autodoc and other enabled extensions."
msgstr ""

#: ../../sphinx/doc/ext/autodoc.rst:489
msgid ""
"a boolean indicating if autodoc will skip this member if the user handler "
"does not override the decision"
msgstr ""
